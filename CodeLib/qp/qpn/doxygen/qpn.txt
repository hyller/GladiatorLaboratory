/**
\defgroup qepn QEP-nano (QP-nano Event Processor)
\defgroup qfn  QF-nano  (Active Object (Actor) Framework)
\defgroup qkn  QK-nano  (Preemptive Run-to-Completin Kernel)

\anchor main_page
\mainpage About QP-nano

\image html qp_banner.jpg

<a href="http://www.state-machine.com/qm/"><strong>QP&trade; (Quantum Platform)</strong></a> is a family of lightweight, open source software frameworks for building responsive and modular real-time embedded applications as systems of cooperating, event-driven <a href="http://www.state-machine.com/qp/index.php#Active">active objects</a> (<a href="http://en.wikipedia.org/wiki/Actor_model">actors</a>). The QP&trade; family consists of QP/C, QP/C++, and <b>QP-nano</b> frameworks, which are all strictly quality controlled, superbly documented, and commercially licensable.

QP-nano&trade; has been specifically designed to enable event-driven programming with
concurrent UML-style hierarchical state machines on low-end 8- and 16-bit
single-chip microcontrollers (MCUs), such as 8051, PIC, AVR, MSP430,
68HC08/11/12, R8C/Tiny, and others alike, with a few hundred bytes of RAM and
a few kilobytes of ROM.

\image html qpn_components.jpg

<STRONG>QP-nano</STRONG> requires only 1-2KB of code and just several bytes of
RAM. This tiny footprint, especially in RAM, makes QP-nano ideal for
high volume, <STRONG>cost-sensitive</STRONG> applications, such as motor
control, lighting control, capacitive touch sensing, remote access control,
RFID, thermostats, small appliances, toys, power supplies, battery chargers,
or just about any custom system-on-a-chip (SOC or ASIC) that contains a small
processor inside. Also, because the event-driven paradigm naturally uses the
CPU only when handling events and otherwise can very easily switch the CPU
into a low-power sleep mode. QP-nano is particularly suitable for
<STRONG>ultra-low power</STRONG> applications, such as wireless sensor networks
or implantable medical devices.

The following diagram shows the total RAM and ROM size requried for
<STRONG>QP-nano</STRONG>, full-version QP, small RTOS, and other popular
RTOSes and OSes. Please note the logarithmic axes. 

\image html Fig7.02.jpg

The behavior of active objects is specified in QP-nano by means of <a href="http://en.wikipedia.org/wiki/UML_state_machine">hierarchical state machines (UML statecharts)</a>. The framework supports manual coding of UML state machines in C as well as fully automatic code generation by means of the free graphical <a href="http://www.state-machine.com/qm/">QM&trade; modeling tool</a>.

\image html PSiCC2_250x200.jpg

The QP frameworks are used in millions of products worldwide in aerospace, robotics, consumer electronics, wired and wireless telecommunications, industrial automation, transportation, and many more. The QP frameworks and the QM modeling tool receive over <a href="http://sourceforge.net/projects/qpc/files/stats/timeline?dates=2012-08-28+to+2013-08-28">30,000 downloads a year</a> (not even counting downloads of QP ports).

QP is available for download from <a href="http://sourceforge.net/projects/qpc">SourceForge.net</a>--the world's biggest open source repository. The summary of available downloads is also available from <a href="http://www.state-machine.com/downloads">Quantum Leaps download page</a>. 

For more information about QP, please visit:
<a href="http://www.state-machine.com/qp"><strong>state-machine.com/qp</strong></a>

<HR>
\section licensing QP/C Licensing

QP-nano is licensed under the increasingly popular dual licensing model, in which both the open source software distribution mechanism and traditional closed source software distribution models are combined.

\note If your company has a policy forbidding open source in your product, all QP frameworks can be licensed commercially, in which case you don't use any open source license and you do not violate your policy.

Open Source Projects:
---------------------
If you are developing and distributing open source applications under the GNU General Public License (GPL), as published by the Free Software Foundation, then you are free to use the Quantum Leaps software under the GPL version 2 of the License, or (at your option) any later version. Please note that GPL requires that all modifications to the original code as well as your application code (Derivative Works as defined in the Copyright Law) must also be released under the terms of the GPL open source license.

Closed Source Projects:
-----------------------
If you are developing and distributing traditional closed source applications, you can purchase one of Quantum Leaps commercial licenses, which are specifically designed for users interested in retaining the proprietary status of their code. All Quantum Leaps commercial licenses expressly supersede the GPL open source license. This means that when you license Quantum Leaps software under a commercial license, you specifically do not use the software under the open source license and therefore you are not subject to any of its terms. 

<HR>
\section contact Contact Information

- Quantum Leaps Web site:   http://www.state-machine.com
- Quantum Leaps licensing:  http://www.state-machine.com/licensing
- QP/QM on SourceForge.net: http://sourceforge.net/projects/qpc
- e-mail: info@state-machine.com

<HR>
\section files Directories and Files

The following annotated directory tree lists the most important directories
and files provided in the standard QP-nano distribution.

\code
qpn\                 - QP-nano root directory
  |
  +-qpn.chm          - "QP-nano Reference Manual" in CHM Help format
  |
  +-doxygen\         - QP documentation generated with Doxygen
  | +-html\          - "QP-nano Reference Manual" in HTML format
  | +-Doxyfile       - Doxygen configuration file to generate the Manual
  | +- . . .
  |
  +-examples\        - QP-nano examples
  | | +-posix\       - Examples for POSIX (Linux, BSD, etc.)
  | | | +-gnu\       - Examples with the GNU compiler
  | | | | +-blinky\  - Simple Blinky example for Linux
  | | | | | +-dbg\   - Debug build
  | | | | | +-rel\     - Release build
  | | | | | +-dpp.qm   - QM model file for this project
  | | | | | +-Makefile - GNU Makefile to build the DPP application
  | | | | | +-. . .
  | | | | +-dpp\     - Dining Philosopher Problem (DPP) example for Linux
  | | | | | +-dbg\   - Debug build
  | | | | | +-rel\     - Release build
  | | | | | +-dpp.qm   - QM model file for this project
  | | | | | +-Makefile - GNU Makefile to build the DPP application
  | | | | | +-. . .
  | | |
  | | +-win32\       - Examples for Win32 (Windows)
  | | | +-mingw\     - Examples for the MinGW (GNU) compiler
  | | | | +-blinky\  - Simple Blinky example for Windows
  | | | | | +-dbg\   - Debug build
  | | | | | | +-blinky.exe - Blinky executable (Debug configuration)
  | | | | | +-rel\      - Release build
  | | | | | +-dpp.qm    - QM model file for this project
  | | | | | +-Makefile  - GNU Makefile to build the DPP application
  | | | | | +-. . .
  | | | | +-dpp\      - Dining Philosopher Problem (DPP) example for Linux
  | | | | +-game-gui\ - "Fly 'n' Shoot" game example (GUI)
  | | | +-comp\       - "Orthogonal Component" pattern (PSiCC2 Chapter 5)
  | | | +-defer\      - "Deferred Event" pattern (PSiCC2 Chapter 5)
  | | | +-history\    - "Transition to History" pattern (PSiCC2 Chapter 5)
  | | | +-hook\       - "Ultimate Hook" pattern (Chapter 5)
  | | | +-reminder\   - "Reminder" pattern (PSiCC2 Chapter 5)
  | | | +-reminder2\  - "Reminder" pattern example2
  | | | |
  | | | +-vc\        - Examples for the Visual C++ compiler
  | | | | +-dpp\     - Dining Philosopher Problem (DPP) example (console)
  | | | | | +-Debug\    - Debug build
  | | | | | | +-dpp.exe - DPP executable (Debug configuration)
  | | | | | +-Release\  - Release build
  | | | | | +-dpp.qm    - QM model file for this project
  | | | | | +-dpp.sln     - Visual Studio solution file
  | | | | | +-dpp.vcxproj - Visual Studio project file
  | | | | | +-. . .
  | | | | +-dpp-gui\    - Dining Philosopher Problem (DPP) example (GUI)
  | | | | +-game-gui\   - "Fly 'n' Shoot" game example (GUI)
  | |
  | +-80x86\         - Examples for the 80x86 processor
  | | +-watcom\      - Examples with the Open Watcom compiler
  | | | +-dpp\       - Dining Philosopher Problem (DPP) example (non-preemptive)
  | | | +-dpp-qk\     - DPP example with the preemptive QK-nano kernel
  | | | +-game\       - "Fly 'n' Shoot" game example (non-preemptive kernel)
  | | | +-game-qk\    - "Fly 'n' Shoot" game with the preemptive QK-nano kernel
  | | | +-pelican\    - PELICAN crossing example (non-preemptive kernel)
  | | | +-pelican-qk\ - PELICAN crossing with the preemptive QK-nano kernel
  | | | +-comp\       - "Orthogonal Component" pattern (PSiCC2 Chapter 5)
  | | | +-defer\      - "Deferred Event" pattern (PSiCC2 Chapter 5)
  | | | +-history\    - "Transition to History" pattern (PSiCC2 Chapter 5)
  | | | +-hook\       - "Ultimate Hook" pattern (Chapter 5)
  | | | +-reminder\   - "Reminder" pattern (PSiCC2 Chapter 5)
  | |
  | +-arm-cm\         - Examples for ARM Cortex-M processor
  | | +-iar\          - Examples with the IAR compiler
  | | | +-blinky_ek-tm4c123gxl\  - Simple Blinky example for EK-TM4C123GXL board
  | | | +-game_ek-lm3s811\       - "Fly 'n' Shoot" example for EK-LM3S811 board
  | | | +-game-qk_ek-lm3s811\    - "Fly 'n' Shoot" example with QK-nano
  | | | +-pelican_ek-tm4c123gxl\ - PELICAN example for EK-TM4C123GXL board
  | | | +-pelican-qk_ek-tm4c123gxl-lint\ - PELICAN example with QK-nano and LINT
  | | | +-. . .       - Other examples for ARM Cortex-M
  | | |
  | | +-gnu\          - Examples with the GNU compiler (Code Sourcery G++)
  | | | +-blinky_ek-tm4c123gxl\  - Simple Blinky example for EK-TM4C123GXL board
  | | | +-game_ek-lm3s811\       - "Fly 'n' Shoot" example for EK-LM3S811 board
  | | | +-game-qk_ek-lm3s811\    - "Fly 'n' Shoot" example with QK-nano
  | | | +-pelican_ek-tm4c123gxl\ - PELICAN example for EK-TM4C123GXL board
  | | | +-pelican-qk_ek-tm4c123gxl-lint\ - PELICAN example with QK-nano and LINT
  | | | +-. . .       - Other examples for ARM Cortex-M
  | |
  | +-msp430\         - Examples for MSP430 processor
  | | +-iar\          - Examples with the IAR compiler
  | | | +-blinky_eZ430\     - Simple Blinky example for eZ430 board
  | | | +-blinky-qk_eZ430\  - Simple Blinky example for eZ430 board and QK-nano
  | | | +-pelican_eZ430\    - PELICAN example for eZ430 board
  | | | +-pelican-qk_eZ430\ - PELICAN example for eZ430 with QK-nano
  | | | +-qhsmtst_eZ430\    - QHsmTst example (semi-hosting debugger output)
  | |
  | +-. . .          - Examples for other CPUs and compilers
  |
  +-include\         - QP-nano platform-independent header files
  | +-qassert.h      - QP-nano assertions
  | +-qepn.h         - QEP-nano platform-independent interface
  | +-qfn.h          - QF-nano platform-independent interface
  | +-qkn.h          - QK-nano platform-independent interface
  |
  +-source\          - QP-nano platform-independent source code (*.c files)
  | +-qepn.c         - QEP-nano platform-independent source code
  | +-qfn.c          - QF-nano  platform-independent source code
  | +-qkn.c          - QK-nano  platform-independent source code
  |
  +-ports\           - Platform-specific QP-nano ports and emulations
  | +-arm-cm\        - Ports to the ARM Cortex-M processor
  | | +-cmis\        - Cortex Microcontroller Software Interface Standard (CMSIS)
  | | +-qk\          - Ports to the preemptive QK-nano kernel
  | | | +-arm_keil\  - Port to the ARM/Keil compiler
  | | | +-gnu\       - Port to the GNU ARM compiler
  | | | +-iar\       - Port to the IAR compiler
  | | +-vanilla\     - Ports to the cooperative Vanilla kernel
  | | | +-arm_keil\  - Port to the ARM/Keil compiler
  | | | +-gnu\       - Port to the GNU ARM compiler
  | | | +-iar\       - Port to the IAR compiler
  | | |
  | +-posix\         - Ports to the POSIX operating systems (Linux, BSD, etc.)
  | | +-gnu\         - Ports with the GNU compiler
  | | | +-. . .
  | |
  | +-win32\         - Ports to the POSIX operating systems (Linux, BSD, etc.)
  | | +-mingw\       - Port with the MinGW (GNU) compiler
  | | | +-. . .
  | | +-vc\          - Port with the Visual C++ compiler
  | | | +-. . .
  | |
\endcode

<HR>
\section derivation Object-Oriented Programming in C

Even though QP-nano is implemented in standard ANSI-C, it extensively uses
object-oriented design principles such as encapsulation (classes) and 
single inheritance. At the C language level, encapsulation and inheritance
become just simple coding idioms, which this section briefly describes.

<b>Encapsulation</b> is the ability to package data with operations into
<b>classes</b>. In C, you represent the data as a \c struct and the 
operations that use this data as functions that take a pointer to the
\c struct as the first argument. For example, the "class" \c ::QMsm
packages the state machine data with the functions that operate on this
data. The declaration of this class in C is as follows:
 
\code
typedef struct QMsmTag {
    QMsmVtbl const *vptr;                       
    QMAttr state;         
    QMAttr temp; 
} QMsm;

void QMsm_ctor(QMsm * const me, QStateHandler initial);
void QMsm_init(QMsm * const me);
void QMsm_dispatch(QMsm * const me);
\endcode

As you can see, QP-nano applies a number of coding and naming conventions
to further strenghten the association between the data struct and the
functions that operate on it:

- the struct holding the class attributes is typedef'ed to the
class name, for convenience of accessing it as \c QMsm instead of
\c struct \c QMsm.

- each class function starts with the prefix \c QMsm_ to make it
clear that the function belongs to the class

- each class function takes the pointer to the \c QMsm \c struct as the
<i>first</i> argument, which is always called <b>me</b>

- the class provides a special function for initialization of the
attributes, which is called \c QMsm_ctor, because it plays the role
of a class <i>constructor</i>.  
      
<b>Inheritance</b> is the ability to derive new classes based on existing
classes in order to reuse and organize code. You can implement single
inheritance in C very simply by literally embedding the base struct as the
first member of the derived struct. For example, \ref FA1 "Figure 1"(a)
shows the struct Child derived from the base struct Parent by
embedding the Parent instance as the first member of Child. To make this
idiom better stand out, in QP the base struct member is always named <b>super</b>.

\anchor FA1 \image html derivation.jpg "Figure 1 (a) Derivation of structures in C, (b) memory alignment, and (c) the UML class diagram."

As shown in \ref FA1 "Figure 1"(b), such nesting of structs always aligns
the data member \c super at the beginning of every instance of the derived
struct. In particular, this alignment lets you treat a pointer to the
derived \c Child struct as a pointer to the \c Parent base struct.
Consequently, you can always safely pass a pointer to \c Child to any C
function that expects a pointer to \c Parent. (To be strictly correct in C, you
should explicitly cast this pointer. In OOP such casting is called upcasting
and is always safe.) Therefore, all functions designed for the \c Parent
"class" are automatically available to the Child "class" as well as
other "classes" derived from \c Child. \ref FA1 "Figure 1"(c) shows the UML
class diagram depicting the inheritance relationship between \c Child and
\c Parent classes.

QP-nano uses single inheritance quite extensively not just for derivation of events
with parameters, but also for derivation of state machines and active objects.
Of course, the C++ version of QP uses the native C++ support for class
inheritance rather than "derivation of structures".

<HR>
\image html logo_ql_TM.jpg
Copyright &copy; Quantum Leaps, LLC. state-machine.com\n
http://www.state-machine.com
*/

