C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 1   


C51 COMPILER V6.10, COMPILATION OF MODULE SCH51A
OBJECT MODULE PLACED IN .\SCH51A.OBJ
COMPILER INVOKED BY: C:\KEIL\C51\BIN\C51.EXE .\SCH51A.C OPTIMIZE(6,SPEED) BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE SYM
                    -BOLS

stmt level    source

   1          /*------------------------------------------------------------------*-
   2          
   3             SCH51a.C (v1.00) 
   4          
   5            ------------------------------------------------------------------
   6          
   7             *** THESE ARE THE CORE SCHEDULER FUNCTIONS ***
   8          
   9             *** 255-TICK VERSION ***
  10          
  11             --- These functions may be used with all 8051 devices ---
  12          
  13             *** SCH_MAX_TASKS *must* be set by the user ***
  14             --- see "Sch51.h" ---
  15          
  16             *** Includes power-saving mode ***
  17             --- You *MUST* confirm that the power-down mode is adapted ---
  18             --- to match your chosen device (usually only necessary with 
  19             --- Extended 8051s, such as c515c, c509, etc ---
  20          
  21          
  22             COPYRIGHT
  23             ---------
  24          
  25             This code is from the book:
  26          
  27             PATTERNS FOR TIME-TRIGGERED EMBEDDED SYSTEMS by Michael J. Pont 
  28             [Pearson Education, 2001; ISBN: 0-201-33138-1].
  29          
  30             This code is copyright (c) 2001 by Michael J. Pont.
  31           
  32             See book for copyright details and other information.
  33          
  34          -*------------------------------------------------------------------*/
  35          
  36          #include "Main.h"
   1      =1  /*------------------------------------------------------------------*-
   2      =1  
   3      =1     Main.H (v1.00)
   4      =1  
   5      =1    ------------------------------------------------------------------
   6      =1     
   7      =1     'Project Header' (see Chap 9) for project 255_TICK (see Chap 37)
   8      =1  
   9      =1  
  10      =1     COPYRIGHT
  11      =1     ---------
  12      =1  
  13      =1     This code is from the book:
  14      =1  
  15      =1     PATTERNS FOR TIME-TRIGGERED EMBEDDED SYSTEMS by Michael J. Pont 
  16      =1     [Pearson Education, 2001; ISBN: 0-201-33138-1].
  17      =1  
  18      =1     This code is copyright (c) 2001 by Michael J. Pont.
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 2   

  19      =1   
  20      =1     See book for copyright details and other information.
  21      =1  
  22      =1  -*------------------------------------------------------------------*/
  23      =1  
  24      =1  #ifndef _MAIN_H
  25      =1  #define _MAIN_H
  26      =1  
  27      =1  //------------------------------------------------------------------
  28      =1  // WILL NEED TO EDIT THIS SECTION FOR EVERY PROJECT
  29      =1  //------------------------------------------------------------------
  30      =1  
  31      =1  // Must include the appropriate microcontroller header file here
  32      =1  #include <AT89x52.h>
   1      =2  /*--------------------------------------------------------------------------
   2      =2  AT89X52.H
   3      =2  
   4      =2  Header file for the low voltage Flash Atmel AT89C52 and AT89LV52.
   5      =2  Copyright (c) 1995-1996 Keil Software, Inc.  All rights reserved.
   6      =2  --------------------------------------------------------------------------*/
   7      =2  
   8      =2  #ifndef AT89X52_HEADER_FILE
   9      =2  #define AT89X52_HEADER_FILE 1
  10      =2  
  11      =2  /*------------------------------------------------
  12      =2  Byte Registers
  13      =2  ------------------------------------------------*/
  14      =2  sfr P0      = 0x80;
  15      =2  sfr SP      = 0x81;
  16      =2  sfr DPL     = 0x82;
  17      =2  sfr DPH     = 0x83;
  18      =2  sfr PCON    = 0x87;
  19      =2  sfr TCON    = 0x88;
  20      =2  sfr TMOD    = 0x89;
  21      =2  sfr TL0     = 0x8A;
  22      =2  sfr TL1     = 0x8B;
  23      =2  sfr TH0     = 0x8C;
  24      =2  sfr TH1     = 0x8D;
  25      =2  sfr P1      = 0x90;
  26      =2  sfr SCON    = 0x98;
  27      =2  sfr SBUF    = 0x99;
  28      =2  sfr P2      = 0xA0;
  29      =2  sfr IE      = 0xA8;
  30      =2  sfr P3      = 0xB0;
  31      =2  sfr IP      = 0xB8;
  32      =2  sfr T2CON   = 0xC8;
  33      =2  sfr T2MOD   = 0xC9;
  34      =2  sfr RCAP2L  = 0xCA;
  35      =2  sfr RCAP2H  = 0xCB;
  36      =2  sfr TL2     = 0xCC;
  37      =2  sfr TH2     = 0xCD;
  38      =2  sfr PSW     = 0xD0;
  39      =2  sfr ACC     = 0xE0;
  40      =2  sfr B       = 0xF0;
  41      =2  
  42      =2  /*------------------------------------------------
  43      =2  P0 Bit Registers
  44      =2  ------------------------------------------------*/
  45      =2  sbit P0_0 = 0x80;
  46      =2  sbit P0_1 = 0x81;
  47      =2  sbit P0_2 = 0x82;
  48      =2  sbit P0_3 = 0x83;
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 3   

  49      =2  sbit P0_4 = 0x84;
  50      =2  sbit P0_5 = 0x85;
  51      =2  sbit P0_6 = 0x86;
  52      =2  sbit P0_7 = 0x87;
  53      =2  
  54      =2  /*------------------------------------------------
  55      =2  PCON Bit Values
  56      =2  ------------------------------------------------*/
  57      =2  #define IDL_    0x01
  58      =2  
  59      =2  #define STOP_   0x02
  60      =2  #define PD_     0x02    /* Alternate definition */
  61      =2  
  62      =2  #define GF0_    0x04
  63      =2  #define GF1_    0x08
  64      =2  #define SMOD_   0x80
  65      =2  
  66      =2  /*------------------------------------------------
  67      =2  TCON Bit Registers
  68      =2  ------------------------------------------------*/
  69      =2  sbit IT0  = 0x88;
  70      =2  sbit IE0  = 0x89;
  71      =2  sbit IT1  = 0x8A;
  72      =2  sbit IE1  = 0x8B;
  73      =2  sbit TR0  = 0x8C;
  74      =2  sbit TF0  = 0x8D;
  75      =2  sbit TR1  = 0x8E;
  76      =2  sbit TF1  = 0x8F;
  77      =2  
  78      =2  /*------------------------------------------------
  79      =2  TMOD Bit Values
  80      =2  ------------------------------------------------*/
  81      =2  #define T0_M0_   0x01
  82      =2  #define T0_M1_   0x02
  83      =2  #define T0_CT_   0x04
  84      =2  #define T0_GATE_ 0x08
  85      =2  #define T1_M0_   0x10
  86      =2  #define T1_M1_   0x20
  87      =2  #define T1_CT_   0x40
  88      =2  #define T1_GATE_ 0x80
  89      =2  
  90      =2  #define T1_MASK_ 0xF0
  91      =2  #define T0_MASK_ 0x0F
  92      =2  
  93      =2  /*------------------------------------------------
  94      =2  P1 Bit Registers
  95      =2  ------------------------------------------------*/
  96      =2  sbit P1_0 = 0x90;
  97      =2  sbit P1_1 = 0x91;
  98      =2  sbit P1_2 = 0x92;
  99      =2  sbit P1_3 = 0x93;
 100      =2  sbit P1_4 = 0x94;
 101      =2  sbit P1_5 = 0x95;
 102      =2  sbit P1_6 = 0x96;
 103      =2  sbit P1_7 = 0x97;
 104      =2  
 105      =2  sbit T2   = 0x90;       /* External input to Timer/Counter 2, clock out */
 106      =2  sbit T2EX = 0x91;       /* Timer/Counter 2 capture/reload trigger & dir ctl */
 107      =2  
 108      =2  /*------------------------------------------------
 109      =2  SCON Bit Registers
 110      =2  ------------------------------------------------*/
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 4   

 111      =2  sbit RI   = 0x98;
 112      =2  sbit TI   = 0x99;
 113      =2  sbit RB8  = 0x9A;
 114      =2  sbit TB8  = 0x9B;
 115      =2  sbit REN  = 0x9C;
 116      =2  sbit SM2  = 0x9D;
 117      =2  sbit SM1  = 0x9E;
 118      =2  sbit SM0  = 0x9F;
 119      =2  
 120      =2  /*------------------------------------------------
 121      =2  P2 Bit Registers
 122      =2  ------------------------------------------------*/
 123      =2  sbit P2_0 = 0xA0;
 124      =2  sbit P2_1 = 0xA1;
 125      =2  sbit P2_2 = 0xA2;
 126      =2  sbit P2_3 = 0xA3;
 127      =2  sbit P2_4 = 0xA4;
 128      =2  sbit P2_5 = 0xA5;
 129      =2  sbit P2_6 = 0xA6;
 130      =2  sbit P2_7 = 0xA7;
 131      =2  
 132      =2  /*------------------------------------------------
 133      =2  IE Bit Registers
 134      =2  ------------------------------------------------*/
 135      =2  sbit EX0  = 0xA8;       /* 1=Enable External interrupt 0 */
 136      =2  sbit ET0  = 0xA9;       /* 1=Enable Timer 0 interrupt */
 137      =2  sbit EX1  = 0xAA;       /* 1=Enable External interrupt 1 */
 138      =2  sbit ET1  = 0xAB;       /* 1=Enable Timer 1 interrupt */
 139      =2  sbit ES   = 0xAC;       /* 1=Enable Serial port interrupt */
 140      =2  sbit ET2  = 0xAD;       /* 1=Enable Timer 2 interrupt */
 141      =2  
 142      =2  sbit EA   = 0xAF;       /* 0=Disable all interrupts */
 143      =2  
 144      =2  /*------------------------------------------------
 145      =2  P3 Bit Registers (Mnemonics & Ports)
 146      =2  ------------------------------------------------*/
 147      =2  sbit P3_0 = 0xB0;
 148      =2  sbit P3_1 = 0xB1;
 149      =2  sbit P3_2 = 0xB2;
 150      =2  sbit P3_3 = 0xB3;
 151      =2  sbit P3_4 = 0xB4;
 152      =2  sbit P3_5 = 0xB5;
 153      =2  sbit P3_6 = 0xB6;
 154      =2  sbit P3_7 = 0xB7;
 155      =2  
 156      =2  sbit RXD  = 0xB0;       /* Serial data input */
 157      =2  sbit TXD  = 0xB1;       /* Serial data output */
 158      =2  sbit INT0 = 0xB2;       /* External interrupt 0 */
 159      =2  sbit INT1 = 0xB3;       /* External interrupt 1 */
 160      =2  sbit T0   = 0xB4;       /* Timer 0 external input */
 161      =2  sbit T1   = 0xB5;       /* Timer 1 external input */
 162      =2  sbit WR   = 0xB6;       /* External data memory write strobe */
 163      =2  sbit RD   = 0xB7;       /* External data memory read strobe */
 164      =2  
 165      =2  /*------------------------------------------------
 166      =2  IP Bit Registers
 167      =2  ------------------------------------------------*/
 168      =2  sbit PX0  = 0xB8;
 169      =2  sbit PT0  = 0xB9;
 170      =2  sbit PX1  = 0xBA;
 171      =2  sbit PT1  = 0xBB;
 172      =2  sbit PS   = 0xBC;
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 5   

 173      =2  sbit PT2  = 0xBD;
 174      =2  
 175      =2  /*------------------------------------------------
 176      =2  T2CON Bit Registers
 177      =2  ------------------------------------------------*/
 178      =2  sbit CP_RL2= 0xC8;      /* 0=Reload, 1=Capture select */
 179      =2  sbit C_T2 = 0xC9;       /* 0=Timer, 1=Counter */
 180      =2  sbit TR2  = 0xCA;       /* 0=Stop timer, 1=Start timer */
 181      =2  sbit EXEN2= 0xCB;       /* Timer 2 external enable */
 182      =2  sbit TCLK = 0xCC;       /* 0=Serial clock uses Timer 1 overflow, 1=Timer 2 */
 183      =2  sbit RCLK = 0xCD;       /* 0=Serial clock uses Timer 1 overflow, 1=Timer 2 */
 184      =2  sbit EXF2 = 0xCE;       /* Timer 2 external flag */
 185      =2  sbit TF2  = 0xCF;       /* Timer 2 overflow flag */
 186      =2  
 187      =2  /*------------------------------------------------
 188      =2  T2MOD Bit Values
 189      =2  ------------------------------------------------*/
 190      =2  #define DCEN_   0x01    /* 1=Timer 2 can be configured as up/down counter */
 191      =2  #define T2OE_   0x02    /* Timer 2 output enable */
 192      =2  
 193      =2  /*------------------------------------------------
 194      =2  PSW Bit Registers
 195      =2  ------------------------------------------------*/
 196      =2  sbit P    = 0xD0;
 197      =2  sbit FL   = 0xD1;
 198      =2  sbit OV   = 0xD2;
 199      =2  sbit RS0  = 0xD3;
 200      =2  sbit RS1  = 0xD4;
 201      =2  sbit F0   = 0xD5;
 202      =2  sbit AC   = 0xD6;
 203      =2  sbit CY   = 0xD7;
 204      =2  
 205      =2  /*------------------------------------------------
 206      =2  Interrupt Vectors:
 207      =2  Interrupt Address = (Number * 8) + 3
 208      =2  ------------------------------------------------*/
 209      =2  #define IE0_VECTOR	0  /* 0x03 External Interrupt 0 */
 210      =2  #define TF0_VECTOR	1  /* 0x0B Timer 0 */
 211      =2  #define IE1_VECTOR	2  /* 0x13 External Interrupt 1 */
 212      =2  #define TF1_VECTOR	3  /* 0x1B Timer 1 */
 213      =2  #define SIO_VECTOR	4  /* 0x23 Serial port */
 214      =2  
 215      =2  #define TF2_VECTOR	5  /* 0x2B Timer 2 */
 216      =2  #define EX2_VECTOR	5  /* 0x2B External Interrupt 2 */
 217      =2  
 218      =2  /*------------------------------------------------
 219      =2  ------------------------------------------------*/
 220      =2  #endif
 221      =2  
 222      =2  
  33      =1  
  34      =1  // Include oscillator / chip details here 
  35      =1  // (essential if generic delays / timeouts are used)
  36      =1  //  -
  37      =1  // Oscillator / resonator frequency (in Hz) e.g. (11059200UL)
  38      =1  #define OSC_FREQ (12000000UL)
  39      =1  
  40      =1  // Number of oscillations per instruction (4, 6 or 12)
  41      =1  // 12 - Original 8051 / 8052 and numerous modern versions
  42      =1  //  6 - Various Infineon and Philips devices, etc.
  43      =1  //  4 - Dallas, etc.
  44      =1  //
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 6   

  45      =1  // Take care with Dallas devices 
  46      =1  // - Timers default to *12* osc ticks unless CKCON is modified 
  47      =1  // - If using generic code on a Dallas device, use 12 here
  48      =1  #define OSC_PER_INST (12)
  49      =1  
  50      =1  //------------------------------------------------------------------
  51      =1  // SHOULD NOT NEED TO EDIT THE SECTIONS BELOW
  52      =1  //------------------------------------------------------------------
  53      =1  typedef unsigned char tByte;
  54      =1  typedef unsigned int  tWord;
  55      =1  typedef unsigned long tLong;
  56      =1  
  57      =1  // Misc #defines
  58      =1  #ifndef TRUE
  59      =1  #define FALSE 0
  60      =1  #define TRUE (!FALSE)
  61      =1  #endif
  62      =1  
  63      =1  #define RETURN_NORMAL (bit) 0
  64      =1  #define RETURN_ERROR (bit) 1
  65      =1  
  66      =1  
  67      =1  //------------------------------------------------------------------
  68      =1  // Interrupts
  69      =1  // - see Chapter 13.  
  70      =1  //------------------------------------------------------------------
  71      =1  
  72      =1  // Generic 8051/52 timer interrupts (used in most schedulers)
  73      =1  #define INTERRUPT_Timer_0_Overflow 1
  74      =1  #define INTERRUPT_Timer_1_Overflow 3
  75      =1  #define INTERRUPT_Timer_2_Overflow 5
  76      =1  
  77      =1  // Additional interrupts (used in shared-clock schedulers)
  78      =1  #define INTERRUPT_EXTERNAL_0 0
  79      =1  #define INTERRUPT_EXTERNAL_1 2
  80      =1  #define INTERRUPT_UART_Rx_Tx 4
  81      =1  #define INTERRUPT_CAN_c515c 17
  82      =1  
  83      =1  //------------------------------------------------------------------
  84      =1  // Error codes 
  85      =1  // - see Chapter 14. 
  86      =1  //------------------------------------------------------------------
  87      =1  
  88      =1  #define ERROR_SCH_TOO_MANY_TASKS (1)
  89      =1  #define ERROR_SCH_CANNOT_DELETE_TASK (2)
  90      =1  
  91      =1  #define ERROR_SCH_WAITING_FOR_SLAVE_TO_ACK (3)
  92      =1  #define ERROR_SCH_WAITING_FOR_START_COMMAND_FROM_MASTER (3)
  93      =1  
  94      =1  #define ERROR_SCH_ONE_OR_MORE_SLAVES_DID_NOT_START (4)
  95      =1  #define ERROR_SCH_LOST_SLAVE (5)
  96      =1  
  97      =1  #define ERROR_SCH_CAN_BUS_ERROR (6)
  98      =1  
  99      =1  #define ERROR_I2C_WRITE_BYTE (10)
 100      =1  #define ERROR_I2C_READ_BYTE (11)
 101      =1  #define ERROR_I2C_WRITE_BYTE_AT24C64 (12)
 102      =1  #define ERROR_I2C_READ_BYTE_AT24C64 (13)
 103      =1  #define ERROR_I2C_DS1621 (14)
 104      =1  
 105      =1  #define ERROR_USART_TI (21)
 106      =1  #define ERROR_USART_WRITE_CHAR (22)
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 7   

 107      =1  
 108      =1  #define ERROR_SPI_EXCHANGE_BYTES_TIMEOUT (31)
 109      =1  #define ERROR_SPI_X25_TIMEOUT (32)
 110      =1  #define ERROR_SPI_MAX1110_TIMEOUT (33)
 111      =1  
 112      =1  #define ERROR_ADC_MAX150_TIMEOUT (44)
 113      =1  
 114      =1  #endif
 115      =1  
 116      =1  /*------------------------------------------------------------------*-
 117      =1    ---- END OF FILE -------------------------------------------------
 118      =1  -*------------------------------------------------------------------*/
  37          #include "Port.h"
   1      =1  /*------------------------------------------------------------------*-
   2      =1  
   3      =1     Port.H (v1.00)
   4      =1  
   5      =1    ------------------------------------------------------------------
   6      =1  
   7      =1    'Port Header' (see Chap 10) for project 255_TICK (see Chap 36)
   8      =1  
   9      =1  
  10      =1     COPYRIGHT
  11      =1     ---------
  12      =1  
  13      =1     This code is from the book:
  14      =1  
  15      =1     PATTERNS FOR TIME-TRIGGERED EMBEDDED SYSTEMS by Michael J. Pont 
  16      =1     [Pearson Education, 2001; ISBN: 0-201-33138-1].
  17      =1  
  18      =1     This code is copyright (c) 2001 by Michael J. Pont.
  19      =1   
  20      =1     See book for copyright details and other information.
  21      =1  
  22      =1  -*------------------------------------------------------------------*/
  23      =1  
  24      =1  // ------ Sch51.C ----------------------------------------
  25      =1  
  26      =1  // Comment this line out if error reporting is NOT required
  27      =1  #define SCH_REPORT_ERRORS
  28      =1  
  29      =1  #ifdef SCH_REPORT_ERRORS
  30      =1  // The port on which error codes will be displayed
  31      =1  // ONLY USED IF ERRORS ARE REPORTED
  32      =1  #define Error_port P2
  33      =1  
  34      =1  #endif
  35      =1  
  36      =1  // ------ LED_Flas.C -----------------------------------------------
  37      =1  
  38      =1  // Connect LED from +5V (etc) to this pin, via appropriate resistor
  39      =1  // [see Chapter 7 for details]
  40      =1  sbit LED_pin = P1^5;
  41      =1  
  42      =1  
  43      =1  /*------------------------------------------------------------------*-
  44      =1    ---- END OF FILE -------------------------------------------------
  45      =1  -*------------------------------------------------------------------*/
  46      =1  
  47      =1  
  48      =1  
  38          
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 8   

  39          #include "Sch51a.h"
   1      =1  /*------------------------------------------------------------------*-
   2      =1    
   3      =1     SCH51a.h (v1.00)
   4      =1  
   5      =1    ------------------------------------------------------------------
   6      =1  
   7      =1     - see SCH51a.C for details
   8      =1  
   9      =1  
  10      =1     COPYRIGHT
  11      =1     ---------
  12      =1  
  13      =1     This code is from the book:
  14      =1  
  15      =1     PATTERNS FOR TIME-TRIGGERED EMBEDDED SYSTEMS by Michael J. Pont 
  16      =1     [Pearson Education, 2001; ISBN: 0-201-33138-1].
  17      =1  
  18      =1     This code is copyright (c) 2001 by Michael J. Pont.
  19      =1   
  20      =1     See book for copyright details and other information.
  21      =1  
  22      =1  -*------------------------------------------------------------------*/
  23      =1  
  24      =1  #ifndef _SCH51_H
  25      =1  #define _SCH51_H
  26      =1  
  27      =1  #include "Main.h"
   1      =2  /*------------------------------------------------------------------*-
   2      =2  
   3      =2     Main.H (v1.00)
   4      =2  
   5      =2    ------------------------------------------------------------------
   6      =2     
   7      =2     'Project Header' (see Chap 9) for project 255_TICK (see Chap 37)
   8      =2  
   9      =2  
  10      =2     COPYRIGHT
  11      =2     ---------
  12      =2  
  13      =2     This code is from the book:
  14      =2  
  15      =2     PATTERNS FOR TIME-TRIGGERED EMBEDDED SYSTEMS by Michael J. Pont 
  16      =2     [Pearson Education, 2001; ISBN: 0-201-33138-1].
  17      =2  
  18      =2     This code is copyright (c) 2001 by Michael J. Pont.
  19      =2   
  20      =2     See book for copyright details and other information.
  21      =2  
  22      =2  -*------------------------------------------------------------------*/
  23      =2  
  24      =2  #ifndef _MAIN_H
           =2 #define _MAIN_H
           =2 
           =2 //------------------------------------------------------------------
           =2 // WILL NEED TO EDIT THIS SECTION FOR EVERY PROJECT
           =2 //------------------------------------------------------------------
           =2 
           =2 // Must include the appropriate microcontroller header file here
           =2 #include <AT89x52.h>
           =2 
           =2 // Include oscillator / chip details here 
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 9   

           =2 // (essential if generic delays / timeouts are used)
           =2 //  -
           =2 // Oscillator / resonator frequency (in Hz) e.g. (11059200UL)
           =2 #define OSC_FREQ (12000000UL)
           =2 
           =2 // Number of oscillations per instruction (4, 6 or 12)
           =2 // 12 - Original 8051 / 8052 and numerous modern versions
           =2 //  6 - Various Infineon and Philips devices, etc.
           =2 //  4 - Dallas, etc.
           =2 //
           =2 // Take care with Dallas devices 
           =2 // - Timers default to *12* osc ticks unless CKCON is modified 
           =2 // - If using generic code on a Dallas device, use 12 here
           =2 #define OSC_PER_INST (12)
           =2 
           =2 //------------------------------------------------------------------
           =2 // SHOULD NOT NEED TO EDIT THE SECTIONS BELOW
           =2 //------------------------------------------------------------------
           =2 typedef unsigned char tByte;
           =2 typedef unsigned int  tWord;
           =2 typedef unsigned long tLong;
           =2 
           =2 // Misc #defines
           =2 #ifndef TRUE
           =2 #define FALSE 0
           =2 #define TRUE (!FALSE)
           =2 #endif
           =2 
           =2 #define RETURN_NORMAL (bit) 0
           =2 #define RETURN_ERROR (bit) 1
           =2 
           =2 
           =2 //------------------------------------------------------------------
           =2 // Interrupts
           =2 // - see Chapter 13.  
           =2 //------------------------------------------------------------------
           =2 
           =2 // Generic 8051/52 timer interrupts (used in most schedulers)
           =2 #define INTERRUPT_Timer_0_Overflow 1
           =2 #define INTERRUPT_Timer_1_Overflow 3
           =2 #define INTERRUPT_Timer_2_Overflow 5
           =2 
           =2 // Additional interrupts (used in shared-clock schedulers)
           =2 #define INTERRUPT_EXTERNAL_0 0
           =2 #define INTERRUPT_EXTERNAL_1 2
           =2 #define INTERRUPT_UART_Rx_Tx 4
           =2 #define INTERRUPT_CAN_c515c 17
           =2 
           =2 //------------------------------------------------------------------
           =2 // Error codes 
           =2 // - see Chapter 14. 
           =2 //------------------------------------------------------------------
           =2 
           =2 #define ERROR_SCH_TOO_MANY_TASKS (1)
           =2 #define ERROR_SCH_CANNOT_DELETE_TASK (2)
           =2 
           =2 #define ERROR_SCH_WAITING_FOR_SLAVE_TO_ACK (3)
           =2 #define ERROR_SCH_WAITING_FOR_START_COMMAND_FROM_MASTER (3)
           =2 
           =2 #define ERROR_SCH_ONE_OR_MORE_SLAVES_DID_NOT_START (4)
           =2 #define ERROR_SCH_LOST_SLAVE (5)
           =2 
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 10  

           =2 #define ERROR_SCH_CAN_BUS_ERROR (6)
           =2 
           =2 #define ERROR_I2C_WRITE_BYTE (10)
           =2 #define ERROR_I2C_READ_BYTE (11)
           =2 #define ERROR_I2C_WRITE_BYTE_AT24C64 (12)
           =2 #define ERROR_I2C_READ_BYTE_AT24C64 (13)
           =2 #define ERROR_I2C_DS1621 (14)
           =2 
           =2 #define ERROR_USART_TI (21)
           =2 #define ERROR_USART_WRITE_CHAR (22)
           =2 
           =2 #define ERROR_SPI_EXCHANGE_BYTES_TIMEOUT (31)
           =2 #define ERROR_SPI_X25_TIMEOUT (32)
           =2 #define ERROR_SPI_MAX1110_TIMEOUT (33)
           =2 
           =2 #define ERROR_ADC_MAX150_TIMEOUT (44)
           =2 
           =2 #endif
 115      =2  
 116      =2  /*------------------------------------------------------------------*-
 117      =2    ---- END OF FILE -------------------------------------------------
 118      =2  -*------------------------------------------------------------------*/
  28      =1  
  29      =1  // ------ Public data type declarations ----------------------------
  30      =1  
  31      =1  // Store in DATA area, if possible, for rapid access  
  32      =1  // Total memory per task is 5 bytes
  33      =1  typedef data struct 
  34      =1     {
  35      =1     // Pointer to the task (must be a 'void (void)' function)
  36      =1     void (code * pTask)(void);  
  37      =1  
  38      =1     // Delay (ticks) until the function will (next) be run
  39      =1     // - see SCH_Add_Task() for further details
  40      =1     tByte Delay;       
  41      =1  
  42      =1     // Interval (ticks) between subsequent runs.
  43      =1     // - see SCH_Add_Task() for further details
  44      =1     tByte Period;       
  45      =1  
  46      =1     // Incremented (by scheduler) when task is due to execute
  47      =1     tByte RunMe;       
  48      =1     } sTask; 
  49      =1  
  50      =1  // ------ Public function prototypes -------------------------------
  51      =1  
  52      =1  // Core scheduler functions
  53      =1  void  SCH_Dispatch_Tasks(void);
  54      =1  tByte SCH_Add_Task(void (code*) (void), const tByte, const tByte);  
  55      =1  bit   SCH_Delete_Task(const tByte);
  56      =1  void  SCH_Report_Status(void);
  57      =1  
  58      =1  // ------ Public constants -----------------------------------------
  59      =1  
  60      =1  // The maximum number of tasks required at any one time
  61      =1  // during the execution of the program
  62      =1  //
  63      =1  // MUST BE ADJUSTED FOR EACH NEW PROJECT
  64      =1  #define SCH_MAX_TASKS   (3)   
  65      =1   
  66      =1  #endif
  67      =1                                
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 11  

  68      =1  /*------------------------------------------------------------------*-
  69      =1    ---- END OF FILE -------------------------------------------------
  70      =1  -*------------------------------------------------------------------*/
  71      =1  
  40          
  41          // ------ Public variable definitions ------------------------------
  42          
  43          // The array of tasks
  44          sTask SCH_tasks_G[SCH_MAX_TASKS];
  45          
  46          // Used to display the error code
  47          // See Main.H for details of error codes
  48          // See Port.H for details of the error port
  49          tByte Error_code_G = 0;
  50          
  51          // ------ Private function prototypes ------------------------------
  52          
  53          static void SCH_Go_To_Sleep(void);
  54          
  55          // ------ Private variables ----------------------------------------
  56          
  57          // Keeps track of time since last error was recorded (see below)
  58          static tWord Error_tick_count_G;
  59          
  60          // The code of the last error (reset after ~1 minute)
  61          static tByte Last_error_code_G;
  62          
  63          
  64          /*------------------------------------------------------------------*-
  65          
  66            SCH_Dispatch_Tasks()
  67          
  68            This is the 'dispatcher' function.  When a task (function)
  69            is due to run, SCH_Dispatch_Tasks() will run it.
  70            This function must be called (repeatedly) from the main loop.
  71          
  72          -*------------------------------------------------------------------*/
  73          void SCH_Dispatch_Tasks(void) 
  74             {
  75   1         tByte Index;
  76   1      
  77   1         // Dispatches (runs) the next task (if one is ready)
  78   1         for (Index = 0; Index < SCH_MAX_TASKS; Index++)
  79   1            {
  80   2            if (SCH_tasks_G[Index].RunMe > 0) 
  81   2               {
  82   3               (*SCH_tasks_G[Index].pTask)();  // Run the task
  83   3      
  84   3               SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
  85   3      
  86   3               // Periodic tasks will be scheduled to run again
  87   3               // - if this is a 'one shot' task, remove it from the array
  88   3               if (SCH_tasks_G[Index].Period == 0)
  89   3                  {
  90   4                  SCH_Delete_Task(Index);
  91   4                  }
  92   3               }
  93   2            }
  94   1      
  95   1         // Report system status
  96   1         SCH_Report_Status();  
  97   1      
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 12  

  98   1         // The scheduler enters idle mode at this point 
  99   1         SCH_Go_To_Sleep();          
 100   1         }
 101          
 102          /*------------------------------------------------------------------*-
 103          
 104            SCH_Add_Task()
 105          
 106            Causes a task (function) to be executed at regular intervals 
 107            or after a user-defined delay
 108          
 109            Fn_P   - The name of the function which is to be scheduled.
 110                     NOTE: All scheduled functions must be 'void, void' -
 111                     that is, they must take no parameters, and have 
 112                     a void return type. 
 113                             
 114            DELAY  - The interval (TICKS) before the task is first executed
 115          
 116            REPEAT - If 'REPEAT' is 0, the function is only called once,
 117                     at the time determined by 'DELAY'.  If REPEAT is non-zero,
 118                     then the function is called repeatedly at an interval
 119                     determined by the value of REPEAT (see below for examples
 120                     which should help clarify this).
 121          
 122          
 123            RETURN VALUE:  
 124          
 125            Returns the position in the task array at which the task has been 
 126            added.  If the return value is SCH_MAX_TASKS then the task could 
 127            not be added to the array (there was insufficient space).  If the
 128            return value is < SCH_MAX_TASKS, then the task was added 
 129            successfully.  
 130          
 131            Note: this return value may be required, if a task is
 132            to be subsequently deleted - see SCH_Delete_Task().
 133          
 134            EXAMPLES:
 135          
 136            Task_ID = SCH_Add_Task(Do_X,1000,0);
 137            Causes the function Do_X() to be executed once after 1000 sch ticks.            
 138          
 139            Task_ID = SCH_Add_Task(Do_X,0,1000);
 140            Causes the function Do_X() to be executed regularly, every 1000 sch ticks.            
 141          
 142            Task_ID = SCH_Add_Task(Do_X,300,1000);
 143            Causes the function Do_X() to be executed regularly, every 1000 ticks.
 144            Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 145           
 146          -*------------------------------------------------------------------*/
 147          tByte SCH_Add_Task(void (code * pFunction)(), 
 148                             const tByte DELAY, 
 149                             const tByte PERIOD)    
 150             {
 151   1         tByte Index = 0;
 152   1         
 153   1         // First find a gap in the array (if there is one)
 154   1         while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 155   1            {
 156   2            Index++;
 157   2            } 
 158   1         
 159   1         // Have we reached the end of the list?   
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 13  

 160   1         if (Index == SCH_MAX_TASKS)
 161   1            {
 162   2            // Task list is full
 163   2            //
 164   2            // Set the global error variable
 165   2            Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 166   2      
 167   2            // Also return an error code
 168   2            return SCH_MAX_TASKS;  
 169   2            }
 170   1            
 171   1         // If we're here, there is a space in the task array
 172   1         SCH_tasks_G[Index].pTask  = pFunction;
 173   1           
 174   1         SCH_tasks_G[Index].Delay  = DELAY;
 175   1         SCH_tasks_G[Index].Period = PERIOD;
 176   1      
 177   1         SCH_tasks_G[Index].RunMe  = 0;
 178   1      
 179   1         return Index; // return position of task (to allow later deletion)
 180   1         }
 181          
 182          /*------------------------------------------------------------------*-
 183          
 184            SCH_Delete_Task()
 185          
 186            Removes a task from the scheduler.  Note that this does
 187            *not* delete the associated function from memory: 
 188            it simply means that it is no longer called by the scheduler. 
 189           
 190            TASK_INDEX - The task index.  Provided by SCH_Add_Task(). 
 191          
 192            RETURN VALUE:  RETURN_ERROR or RETURN_NORMAL
 193          
 194          -*------------------------------------------------------------------*/
 195          bit SCH_Delete_Task(const tByte TASK_INDEX) 
 196             {
 197   1         bit Return_code;
 198   1      
 199   1         if (SCH_tasks_G[TASK_INDEX].pTask == 0)
 200   1            {
 201   2            // No task at this location...
 202   2            //
 203   2            // Set the global error variable
 204   2            Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 205   2      
 206   2            // ...also return an error code
 207   2            Return_code = RETURN_ERROR;
 208   2            }
 209   1         else
 210   1            {
 211   2            Return_code = RETURN_NORMAL;
 212   2            }      
 213   1         
 214   1         SCH_tasks_G[TASK_INDEX].pTask   = 0x0000;
 215   1         SCH_tasks_G[TASK_INDEX].Delay   = 0;
 216   1         SCH_tasks_G[TASK_INDEX].Period  = 0;
 217   1      
 218   1         SCH_tasks_G[TASK_INDEX].RunMe   = 0;
 219   1      
 220   1         return Return_code;       // return status
 221   1         }
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 14  

 222          
 223          
 224          /*------------------------------------------------------------------*-
 225          
 226            SCH_Report_Status()
 227          
 228            Simple function to display error codes.
 229          
 230            This version displays code on a port with attached LEDs:
 231            adapt, if required, to report errors over serial link, etc.
 232          
 233            Errors are only displayed for a limited period 
 234            (60000 ticks = 1 minute at 1ms tick interval).
 235            After this the the error code is reset to 0. 
 236          
 237            This code may be easily adapted to display the last
 238            error 'for ever': this may be appropriate in your
 239            application.
 240          
 241            See Chapter 10 for further information.
 242          
 243          -*------------------------------------------------------------------*/
 244          void SCH_Report_Status(void)
 245             {
 246   1      #ifdef SCH_REPORT_ERRORS
 247   1         // ONLY APPLIES IF WE ARE REPORTING ERRORS
 248   1         // Check for a new error code
 249   1         if (Error_code_G != Last_error_code_G)
 250   1            {
 251   2            // Negative logic on LEDs assumed
 252   2            Error_port = 255 - Error_code_G;
 253   2            
 254   2            Last_error_code_G = Error_code_G;
 255   2      
 256   2            if (Error_code_G != 0)
 257   2               {
 258   3               Error_tick_count_G = 60000;
 259   3               }
 260   2            else
 261   2               {
 262   3               Error_tick_count_G = 0;
 263   3               }
 264   2            }
 265   1         else
 266   1            {
 267   2            if (Error_tick_count_G != 0)
 268   2               {
 269   3               if (--Error_tick_count_G == 0)
 270   3                  {
 271   4                  Error_code_G = 0; // Reset error code
 272   4                  }
 273   3               }
 274   2            }
 275   1      #endif
 276   1         }
 277          
 278          
 279          /*------------------------------------------------------------------*-
 280          
 281            SCH_Go_To_Sleep()
 282          
 283            This scheduler enters 'idle mode' between clock ticks
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 15  

 284            to save power.  The next clock tick will return the processor
 285            to the normal operating state.
 286          
 287            Note: a slight performance improvement is possible if this
 288            function is implemented as a macro, or if the code here is simply 
 289            pasted into the 'dispatch' function.  
 290          
 291            However, by making this a function call, it becomes easier 
 292            - during development - to assess the performance of the 
 293            scheduler, using the 'performance analyser' in the Keil 
 294            hardware simulator. See Chapter 14 for examples for this. 
 295          
 296            *** May wish to disable this if using a watchdog ***
 297          
 298            *** ADAPT AS REQUIRED FOR YOUR HARDWARE ***
 299          
 300          -*------------------------------------------------------------------*/
 301          void SCH_Go_To_Sleep()
 302             {
 303   1         PCON |= 0x01;    // Enter idle mode (generic 8051 version)
 304   1      
 305   1         // Entering idle mode requires TWO consecutive instructions 
 306   1         // on 80c515 / 80c505 - to avoid accidental triggering
 307   1         //PCON |= 0x01;    // Enter idle mode (#1)
 308   1         //PCON |= 0x20;    // Enter idle mode (#2)
 309   1         }
 310          
 311          
 312          /*------------------------------------------------------------------*-
 313            ---- END OF FILE -------------------------------------------------
 314          -*------------------------------------------------------------------*/
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 16  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION SCH_Dispatch_Tasks (BEGIN)
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 78
0000 E4                CLR     A
0001 F500        R     MOV     Index,A
0003         ?C0001:
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
0003 E500        R     MOV     A,Index
0005 75F005            MOV     B,#05H
0008 A4                MUL     AB
0009 2400        R     ADD     A,#LOW SCH_tasks_G+04H
000B F8                MOV     R0,A
000C E6                MOV     A,@R0
000D D3                SETB    C
000E 9400              SUBB    A,#00H
0010 402E              JC      ?C0003
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 82
0012 E500        R     MOV     A,Index
0014 75F005            MOV     B,#05H
0017 A4                MUL     AB
0018 2400        R     ADD     A,#LOW SCH_tasks_G
001A F8                MOV     R0,A
001B E6                MOV     A,@R0
001C FE                MOV     R6,A
001D 08                INC     R0
001E E6                MOV     A,@R0
001F AA06              MOV     R2,AR6
0021 F9                MOV     R1,A
0022 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 84
0025 E500        R     MOV     A,Index
0027 75F005            MOV     B,#05H
002A A4                MUL     AB
002B 2400        R     ADD     A,#LOW SCH_tasks_G+04H
002D F8                MOV     R0,A
002E 16                DEC     @R0
                                           ; SOURCE LINE # 88
002F E500        R     MOV     A,Index
0031 75F005            MOV     B,#05H
0034 A4                MUL     AB
0035 2400        R     ADD     A,#LOW SCH_tasks_G+03H
0037 F8                MOV     R0,A
0038 E6                MOV     A,@R0
0039 7005              JNZ     ?C0003
                                           ; SOURCE LINE # 89
                                           ; SOURCE LINE # 90
003B AF00        R     MOV     R7,Index
003D 120000      R     LCALL   _SCH_Delete_Task
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
                                           ; SOURCE LINE # 93
0040         ?C0003:
0040 0500        R     INC     Index
0042 E500        R     MOV     A,Index
0044 C3                CLR     C
0045 9403              SUBB    A,#03H
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 17  

0047 40BA              JC      ?C0001
0049         ?C0002:
                                           ; SOURCE LINE # 96
0049 120000      R     LCALL   SCH_Report_Status
                                           ; SOURCE LINE # 99
004C 120000      R     LCALL   SCH_Go_To_Sleep
                                           ; SOURCE LINE # 100
004F 22                RET     
             ; FUNCTION SCH_Dispatch_Tasks (END)

             ; FUNCTION _SCH_Add_Task (BEGIN)
0000 8E00        R     MOV     pFunction,R6
0002 8F00        R     MOV     pFunction+01H,R7
;---- Variable 'DELAY' assigned to Register 'R7' ----
0004 AF05              MOV     R7,AR5
;---- Variable 'PERIOD' assigned to Register 'R3' ----
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
;---- Variable 'Index' assigned to Register 'R6' ----
0006 E4                CLR     A
0007 FE                MOV     R6,A
0008         ?C0007:
                                           ; SOURCE LINE # 154
0008 EE                MOV     A,R6
0009 75F005            MOV     B,#05H
000C A4                MUL     AB
000D 2400        R     ADD     A,#LOW SCH_tasks_G
000F F8                MOV     R0,A
0010 E6                MOV     A,@R0
0011 FC                MOV     R4,A
0012 08                INC     R0
0013 E6                MOV     A,@R0
0014 4C                ORL     A,R4
0015 6009              JZ      ?C0008
0017 EE                MOV     A,R6
0018 C3                CLR     C
0019 9403              SUBB    A,#03H
001B 5003              JNC     ?C0008
                                           ; SOURCE LINE # 155
                                           ; SOURCE LINE # 156
001D 0E                INC     R6
                                           ; SOURCE LINE # 157
001E 80E8              SJMP    ?C0007
0020         ?C0008:
                                           ; SOURCE LINE # 160
0020 BE0306            CJNE    R6,#03H,?C0009
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 165
0023 750001      R     MOV     Error_code_G,#01H
                                           ; SOURCE LINE # 168
0026 7F03              MOV     R7,#03H
0028 22                RET     
                                           ; SOURCE LINE # 169
0029         ?C0009:
                                           ; SOURCE LINE # 172
0029 EE                MOV     A,R6
002A 75F005            MOV     B,#05H
002D A4                MUL     AB
002E 2400        R     ADD     A,#LOW SCH_tasks_G
0030 F8                MOV     R0,A
0031 A600        R     MOV     @R0,pFunction
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 18  

0033 08                INC     R0
0034 A600        R     MOV     @R0,pFunction+01H
                                           ; SOURCE LINE # 174
0036 EE                MOV     A,R6
0037 75F005            MOV     B,#05H
003A A4                MUL     AB
003B 2400        R     ADD     A,#LOW SCH_tasks_G+02H
003D F8                MOV     R0,A
003E A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 175
0040 EE                MOV     A,R6
0041 75F005            MOV     B,#05H
0044 A4                MUL     AB
0045 2400        R     ADD     A,#LOW SCH_tasks_G+03H
0047 F8                MOV     R0,A
0048 A603              MOV     @R0,AR3
                                           ; SOURCE LINE # 177
004A EE                MOV     A,R6
004B 75F005            MOV     B,#05H
004E A4                MUL     AB
004F 2400        R     ADD     A,#LOW SCH_tasks_G+04H
0051 F8                MOV     R0,A
0052 E4                CLR     A
0053 F6                MOV     @R0,A
                                           ; SOURCE LINE # 179
0054 AF06              MOV     R7,AR6
                                           ; SOURCE LINE # 180
0056         ?C0010:
0056 22                RET     
             ; FUNCTION _SCH_Add_Task (END)

             ; FUNCTION _SCH_Delete_Task (BEGIN)
;---- Variable 'TASK_INDEX' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 199
0000 EF                MOV     A,R7
0001 75F005            MOV     B,#05H
0004 A4                MUL     AB
0005 2400        R     ADD     A,#LOW SCH_tasks_G
0007 F8                MOV     R0,A
0008 E6                MOV     A,@R0
0009 FC                MOV     R4,A
000A 08                INC     R0
000B E6                MOV     A,@R0
000C 4C                ORL     A,R4
000D 7007              JNZ     ?C0011
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 204
000F 750002      R     MOV     Error_code_G,#02H
                                           ; SOURCE LINE # 207
0012 D200        R     SETB    Return_code
                                           ; SOURCE LINE # 208
0014 8002              SJMP    ?C0012
0016         ?C0011:
                                           ; SOURCE LINE # 210
                                           ; SOURCE LINE # 211
0016 C200        R     CLR     Return_code
                                           ; SOURCE LINE # 212
0018         ?C0012:
                                           ; SOURCE LINE # 214
0018 EF                MOV     A,R7
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 19  

0019 75F005            MOV     B,#05H
001C A4                MUL     AB
001D 2400        R     ADD     A,#LOW SCH_tasks_G
001F F8                MOV     R0,A
0020 E4                CLR     A
0021 F6                MOV     @R0,A
0022 08                INC     R0
0023 F6                MOV     @R0,A
                                           ; SOURCE LINE # 215
0024 EF                MOV     A,R7
0025 75F005            MOV     B,#05H
0028 A4                MUL     AB
0029 2400        R     ADD     A,#LOW SCH_tasks_G+02H
002B F8                MOV     R0,A
002C E4                CLR     A
002D F6                MOV     @R0,A
                                           ; SOURCE LINE # 216
002E EF                MOV     A,R7
002F 75F005            MOV     B,#05H
0032 A4                MUL     AB
0033 2400        R     ADD     A,#LOW SCH_tasks_G+03H
0035 F8                MOV     R0,A
0036 E4                CLR     A
0037 F6                MOV     @R0,A
                                           ; SOURCE LINE # 218
0038 EF                MOV     A,R7
0039 75F005            MOV     B,#05H
003C A4                MUL     AB
003D 2400        R     ADD     A,#LOW SCH_tasks_G+04H
003F F8                MOV     R0,A
0040 E4                CLR     A
0041 F6                MOV     @R0,A
                                           ; SOURCE LINE # 220
0042 A200        R     MOV     C,Return_code
                                           ; SOURCE LINE # 221
0044         ?C0013:
0044 22                RET     
             ; FUNCTION _SCH_Delete_Task (END)

             ; FUNCTION SCH_Report_Status (BEGIN)
                                           ; SOURCE LINE # 244
                                           ; SOURCE LINE # 245
                                           ; SOURCE LINE # 249
0000 E500        R     MOV     A,Error_code_G
0002 6500        R     XRL     A,Last_error_code_G
0004 601B              JZ      ?C0014
                                           ; SOURCE LINE # 250
                                           ; SOURCE LINE # 252
0006 C3                CLR     C
0007 74FF              MOV     A,#0FFH
0009 9500        R     SUBB    A,Error_code_G
000B F5A0              MOV     P2,A
                                           ; SOURCE LINE # 254
000D 850000      R     MOV     Last_error_code_G,Error_code_G
                                           ; SOURCE LINE # 256
0010 E500        R     MOV     A,Error_code_G
0012 6007              JZ      ?C0015
                                           ; SOURCE LINE # 257
                                           ; SOURCE LINE # 258
0014 7500EA      R     MOV     Error_tick_count_G,#0EAH
0017 750060      R     MOV     Error_tick_count_G+01H,#060H
                                           ; SOURCE LINE # 259
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 20  

001A 22                RET     
001B         ?C0015:
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
001B E4                CLR     A
001C F500        R     MOV     Error_tick_count_G,A
001E F500        R     MOV     Error_tick_count_G+01H,A
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
0020 22                RET     
0021         ?C0014:
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
0021 E500        R     MOV     A,Error_tick_count_G+01H
0023 4500        R     ORL     A,Error_tick_count_G
0025 600F              JZ      ?C0020
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
0027 E500        R     MOV     A,Error_tick_count_G+01H
0029 1500        R     DEC     Error_tick_count_G+01H
002B 7002              JNZ     ?C0022
002D 1500        R     DEC     Error_tick_count_G
002F         ?C0022:
002F 14                DEC     A
0030 4500        R     ORL     A,Error_tick_count_G
0032 7002              JNZ     ?C0020
                                           ; SOURCE LINE # 270
                                           ; SOURCE LINE # 271
0034 F500        R     MOV     Error_code_G,A
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 274
                                           ; SOURCE LINE # 276
0036         ?C0020:
0036 22                RET     
             ; FUNCTION SCH_Report_Status (END)

             ; FUNCTION SCH_Go_To_Sleep (BEGIN)
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
0000 438701            ORL     PCON,#01H
                                           ; SOURCE LINE # 309
0003 22                RET     
             ; FUNCTION SCH_Go_To_Sleep (END)

C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 21  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


LED_pin. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
T2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
tLong. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
sTask. . . . . . . . . . . . . . . . .  TYPEDEF  DATA   STRUCT   -----  5
  pTask. . . . . . . . . . . . . . . .  MEMBER   -----  PTR      0000H  2
  Delay. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  Period . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  RunMe. . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
tByte. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
SCH_tasks_G. . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0000H  15
P0_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0080H  1
P1_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
P0_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0081H  1
FL . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D1H  1
P2_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A0H  1
P1_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
P0_2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0082H  1
tWord. . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
P3_0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
P2_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
P1_2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0092H  1
P0_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0083H  1
P3_1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
P2_2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
P1_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0093H  1
P0_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0084H  1
P3_2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
P2_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
P1_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0094H  1
P0_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0085H  1
EXF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
RD . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
P3_3 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
P2_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
P1_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0095H  1
P0_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0086H  1
P3_4 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
P2_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A5H  1
P1_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0096H  1
P0_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0087H  1
P3_5 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
P2_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A6H  1
P1_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0097H  1
P3_6 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
P2_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A7H  1
P3_7 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 22  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
_SCH_Add_Task. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  pFunction. . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
  DELAY. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  PERIOD . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0003H  1
  Index. . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
PS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
T2EX . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
SCH_Report_Status. . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
C_T2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
WR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
RCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
TCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
Error_code_G . . . . . . . . . . . . .  PUBLIC   DATA   U_CHAR   000FH  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
CP_RL2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
Last_error_code_G. . . . . . . . . . .  STATIC   DATA   U_CHAR   0010H  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
TF2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
Error_tick_count_G . . . . . . . . . .  STATIC   DATA   U_INT    0011H  2
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
PT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
SCH_Dispatch_Tasks . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  Index. . . . . . . . . . . . . . . .  AUTO     DATA   U_CHAR   0000H  1
EXEN2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
_SCH_Delete_Task . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  TASK_INDEX . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  Return_code. . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
RXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
TXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
C51 COMPILER V6.10  SCH51A                                                                 04/09/2001 15:00:14 PAGE 23  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SCH_Go_To_Sleep. . . . . . . . . . . .  STATIC   CODE   PROC     0000H  -----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    295    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
