<?xml version="1.0" encoding="UTF-8"?>
<model version="3.1.1">
 <documentation>&quot;Fly 'n' Shoot&quot; game example (see Chapter 1 in PSiCC2)</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Tunnel" superclass="qpn::QMActive">
   <documentation>Tunnel Active Object</documentation>
   <attribute name="mines[GAME_MINES_MAX]" type="QMsm *" visibility="0x02" properties="0x00"/>
   <attribute name="mine1_pool[GAME_MINES_MAX]" type="QMsm *" visibility="0x02" properties="0x00"/>
   <attribute name="mine2_pool[GAME_MINES_MAX]" type="QMsm *" visibility="0x02" properties="0x00"/>
   <attribute name="blink_ctr" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="last_mine_x" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="last_mine_y" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="wall_thickness_top" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="wall_thickness_bottom" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="minimal_gap" type="uint8_t" visibility="0x02" properties="0x00"/>
   <operation name="advance" type="void" visibility="0x02" properties="0x00">
    <code>uint32_t rnd;
uint32_t bmp1; /* bimap representing 1 column of the image */

rnd = (random() &amp; 0xFFU);

/* reduce the top wall thickness 18.75% of the time */
if ((rnd &lt; 48U) &amp;&amp; (me-&gt;wall_thickness_top &gt; 0U)) {
    --me-&gt;wall_thickness_top;
}

/* reduce the bottom wall thickness 18.75% of the time */
if ((rnd &gt; 208U) &amp;&amp; (me-&gt;wall_thickness_bottom &gt; 0U)) {
    --me-&gt;wall_thickness_bottom;
}

rnd = (random() &amp; 0xFFU);

/* grow the top wall thickness 18.75% of the time */
if ((rnd &lt; 48U)
    &amp;&amp; ((GAME_SCREEN_HEIGHT
         - me-&gt;wall_thickness_top
         - me-&gt;wall_thickness_bottom) &gt; me-&gt;minimal_gap)
    &amp;&amp; ((me-&gt;last_mine_x &lt; (GAME_SCREEN_WIDTH - 5U))
        || (me-&gt;last_mine_y &gt; (me-&gt;wall_thickness_top + 1U))))
{
    ++me-&gt;wall_thickness_top;
}

/* grow the bottom wall thickness 18.75% of the time */
if ((rnd &gt; 208U)
    &amp;&amp; ((GAME_SCREEN_HEIGHT
         - me-&gt;wall_thickness_top
         - me-&gt;wall_thickness_bottom) &gt; me-&gt;minimal_gap)
    &amp;&amp; ((me-&gt;last_mine_x &lt; (GAME_SCREEN_WIDTH - 5U))
         || (me-&gt;last_mine_y + 1U
            &lt; (GAME_SCREEN_HEIGHT - me-&gt;wall_thickness_bottom))))
{
    ++me-&gt;wall_thickness_bottom;
}

/* advance the Tunnel by 1 game step to the left */
memmove(l_walls, l_walls + GAME_SPEED_X,
        (GAME_SCREEN_WIDTH * GAME_SCREEN_HEIGHT/8) - GAME_SPEED_X);

bmp1 = (~(~0 &lt;&lt; me-&gt;wall_thickness_top))
        | (~0 &lt;&lt; (GAME_SCREEN_HEIGHT
                    - me-&gt;wall_thickness_bottom));

l_walls[GAME_SCREEN_WIDTH - 1] = (uint8_t)bmp1;
l_walls[GAME_SCREEN_WIDTH + GAME_SCREEN_WIDTH - 1]
      = (uint8_t)(bmp1 &gt;&gt; 8);

/* copy the Tunnel layer to the main frame buffer */
memcpy(l_frame, l_walls, (GAME_SCREEN_WIDTH * GAME_SCREEN_HEIGHT/8));</code>
   </operation>
   <operation name="plantMine" type="void" visibility="0x02" properties="0x00">
    <code>uint32_t rnd = (random() &amp; 0xFFU);

if (me-&gt;last_mine_x &gt; 0U) {
    --me-&gt;last_mine_x;    /* shift the last Mine 1 position to the left */
}
                                               /* last mine far enough? */
if ((me-&gt;last_mine_x + GAME_MINES_DIST_MIN &lt; GAME_SCREEN_WIDTH)
    &amp;&amp; (rnd &lt; 8))                /* place the mines only 5% of the time */
{
    uint8_t n;
    for (n = 0; n &lt; Q_DIM(me-&gt;mines); ++n) { /* look for disabled mines */
        if (me-&gt;mines[n] == (QMsm *)0) {
            break;
        }
    }
    if (n &lt; Q_DIM(me-&gt;mines)) {               /* a disabled Mine found? */
        rnd = (random() &amp; 0xFFFFU);

        if ((rnd &amp; 1U) == 0U) {          /* choose the type of the mine */
            me-&gt;mines[n] = me-&gt;mine1_pool[n];
        }
        else {
            me-&gt;mines[n] = me-&gt;mine2_pool[n];
        }

        /* new Mine is planted in the last column of the tunnel */
        me-&gt;last_mine_x = GAME_SCREEN_WIDTH;

        /* choose a random y-position for the Mine in the Tunnel */
        rnd %= (GAME_SCREEN_HEIGHT
                - me-&gt;wall_thickness_top
                - me-&gt;wall_thickness_bottom - 4U);
        me-&gt;last_mine_y = (uint8_t)(me-&gt;wall_thickness_top + 2U + rnd);

        Q_SIG(me-&gt;mines[n]) = MINE_PLANT_SIG;
        Q_PAR(me-&gt;mines[n]) = (me-&gt;last_mine_x | (me-&gt;last_mine_y &lt;&lt; 8));
        QMSM_DISPATCH(me-&gt;mines[n]); /* direct dispatch */
    }
}</code>
   </operation>
   <operation name="addImageAt" type="void" visibility="0x02" properties="0x00">
    <parameter name="bmp" type="uint8_t"/>
    <parameter name="x_pos" type="uint8_t"/>
    <parameter name="y_pos" type="int8_t"/>
    <code>uint8_t x; /* the x-index of the image */
uint8_t w; /* the width of the image */

Q_REQUIRE(bmp &lt; Q_DIM(l_bitmap));

w = l_bitmap[bmp].width;
if (w &gt; GAME_SCREEN_WIDTH - x_pos) {
    w = GAME_SCREEN_WIDTH - x_pos;
}
for (x = 0; x &lt; w; ++x) {
    uint32_t bmp1;
    if (y_pos &gt;= 0) {
        bmp1 = (l_bitmap[bmp].bits[x] &lt;&lt; (uint8_t)y_pos);
    }
    else {
        bmp1 = (l_bitmap[bmp].bits[x] &gt;&gt; (uint8_t)(-y_pos));
    }
    l_frame[x_pos + x] |= (uint8_t)bmp1;
    l_frame[x_pos + x + GAME_SCREEN_WIDTH] |= (uint8_t)(bmp1 &gt;&gt; 8);
}
(void)me; /* avoid the compiler warning */</code>
   </operation>
   <operation name="dispatchToAllMines" type="void" visibility="0x02" properties="0x00">
    <parameter name="sig" type="QSignal"/>
    <parameter name="par" type="QParam"/>
    <code>uint8_t n;

for (n = 0; n &lt; GAME_MINES_MAX; ++n) {
    if (me-&gt;mines[n] != (QMsm *)0) { /* is the mine used? */
        Q_SIG(me-&gt;mines[n]) = sig;
        Q_PAR(me-&gt;mines[n]) = par;
        QMSM_DISPATCH(me-&gt;mines[n]);
    }
}</code>
   </operation>
   <operation name="isWallHit" type="uint8_t" visibility="0x02" properties="0x00">
    <parameter name="bmp" type="uint8_t"/>
    <parameter name="x_pos" type="uint8_t"/>
    <parameter name="y_pos" type="uint8_t"/>
    <code>uint8_t x;
uint8_t w; /* the width of the image */

Q_REQUIRE(bmp &lt; Q_DIM(l_bitmap));

w = l_bitmap[bmp].width;
if (w &gt; GAME_SCREEN_WIDTH - x_pos) {
    w = GAME_SCREEN_WIDTH - x_pos;
}
for (x = 0; x &lt; w; ++x) {
    uint32_t bmp1 = ((uint32_t)l_bitmap[bmp].bits[x] &lt;&lt; y_pos);
    if (((l_walls[x_pos + x] &amp; (uint8_t)bmp1) != 0)
        || ((l_walls[x_pos + x + GAME_SCREEN_WIDTH]
             &amp; (uint8_t)(bmp1 &gt;&gt; 8)) != 0))
    {
        return (uint8_t)1;
    }
}
(void)me;  /* avoid the compiler warning */
return (uint8_t)0;</code>
   </operation>
   <statechart>
    <initial target="../1/6">
     <action>uint8_t n;
for (n = 0; n &lt; GAME_MINES_MAX; ++n) {
    QMSM_INIT(me-&gt;mine1_pool[n]); /* initial tran. for Mine1 */
    QMSM_INIT(me-&gt;mine2_pool[n]); /* initial tran. for Mine2 */
}

randomSeed(1234); /* seed the pseudo-random generator */</action>
     <initial_glyph conn="3,2,5,1,25,13,-2">
      <action box="1,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="active">
     <tran trig="MINE_DISABLED">
      <action>Q_ASSERT((Q_PAR(me) &lt; GAME_MINES_MAX)
         &amp;&amp; (me-&gt;mines[Q_PAR(me)] != (QMsm *)0));
me-&gt;mines[Q_PAR(me)] = (QMsm *)0;</action>
      <tran_glyph conn="2,9,3,-1,18">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <tran trig="PLAYER_QUIT" target="../../2">
      <tran_glyph conn="2,12,3,1,64,76,-41">
       <action box="0,-2,11,2"/>
      </tran_glyph>
     </tran>
     <state name="demo">
      <entry>me-&gt;last_mine_x = 0; /* last mine at right edge of the tunnel */
me-&gt;last_mine_y = 0;

/* set the tunnel properties... */
me-&gt;wall_thickness_top = 0;
me-&gt;wall_thickness_bottom = 0;
me-&gt;minimal_gap = GAME_SCREEN_HEIGHT - 3;

/* erase the tunnel walls */
memset(l_walls, (uint8_t)0,
       (GAME_SCREEN_WIDTH * GAME_SCREEN_HEIGHT/8));


QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/2U); /* 1/2 sec */
me-&gt;blink_ctr = 20*2; /* 20s timeout total */</entry>
      <exit>QActive_disarmX((QActive *)me, 0U);</exit>
      <tran trig="Q_TIMEOUT">
       <action>--me-&gt;blink_ctr;
QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/2U); /* 1/2 sec */</action>
       <choice target="../../../4">
        <guard>me-&gt;blink_ctr == 0</guard>
        <choice_glyph conn="16,42,5,3,18">
         <action box="1,0,14,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,42,3,-1,12">
        <action box="0,-2,12,4"/>
       </tran_glyph>
      </tran>
      <tran trig="TIME_TICK">
       <action>Tunnel_advance(me);
if ((me-&gt;blink_ctr &amp; 1) != 0) {
    /* add the text bitmap into the frame buffer */
    Tunnel_addImageAt(me,
        PRESS_BUTTON_BMP,
        (GAME_SCREEN_WIDTH - 55)/2,
        (GAME_SCREEN_HEIGHT - 8)/2);
}
BSP_drawBitmap(l_frame);</action>
       <tran_glyph conn="4,39,3,-1,12">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <tran trig="PLAYER_TRIGGER" target="../../3">
       <tran_glyph conn="4,47,3,1,24,7,-2">
        <action box="0,-2,13,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,30,22,20">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state name="playing">
      <entry>me-&gt;minimal_gap = GAME_SCREEN_HEIGHT - 3;

/* erase the walls */
memset(l_walls, (uint8_t)0,
       (GAME_SCREEN_WIDTH * GAME_SCREEN_HEIGHT/8));

QACTIVE_POST((QActive *)&amp;AO_Ship, TAKE_OFF_SIG, 0);</entry>
      <exit>Tunnel_dispatchToAllMines(me, MINE_RECYCLE_SIG, 0);</exit>
      <tran trig="TIME_TICK">
       <action>BSP_drawBitmap(l_frame); /* render this frame on the display */
Tunnel_advance(me);
Tunnel_plantMine(me);
Tunnel_dispatchToAllMines(me, Q_SIG(me), Q_PAR(me));</action>
       <tran_glyph conn="4,61,3,-1,12">
        <action box="0,-2,9,2"/>
       </tran_glyph>
      </tran>
      <tran trig="SHIP_IMG">
       <action>uint8_t x   = (uint8_t)Q_PAR(me);
uint8_t y   = (uint8_t)(Q_PAR(me) &gt;&gt; 8);
uint8_t bmp = (uint8_t)(Q_PAR(me) &gt;&gt; 16);

/* did the Ship/Missile hit the tunnel wall? */
if (Tunnel_isWallHit(me, bmp, x, y)) {
    QACTIVE_POST((QActive *)&amp;AO_Ship, HIT_WALL_SIG, 0);
}
Tunnel_addImageAt(me, bmp, x, y);
Tunnel_dispatchToAllMines(me, Q_SIG(me), Q_PAR(me));</action>
       <tran_glyph conn="4,64,3,-1,12">
        <action box="0,-2,9,2"/>
       </tran_glyph>
      </tran>
      <tran trig="MISSILE_IMG">
       <action>uint8_t x   = (uint8_t)Q_PAR(me);
uint8_t y   = (uint8_t)(Q_PAR(me) &gt;&gt; 8);
uint8_t bmp = (uint8_t)(Q_PAR(me) &gt;&gt; 16);

/* did the Ship/Missile hit the tunnel wall? */
if (Tunnel_isWallHit(me, bmp, x, y)) {
    QACTIVE_POST((QActive *)&amp;AO_Missile, HIT_WALL_SIG, 0);
}
Tunnel_addImageAt(me, bmp, x, y);
Tunnel_dispatchToAllMines(me, Q_SIG(me), Q_PAR(me));</action>
       <tran_glyph conn="4,67,3,-1,12">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <tran trig="MINE_IMG">
       <action>Tunnel_addImageAt(me,
                  (uint8_t)(Q_PAR(me) &gt;&gt; 16),
                  (uint8_t)Q_PAR(me),
                  (int8_t) (Q_PAR(me) &gt;&gt; 8));</action>
       <tran_glyph conn="4,70,3,-1,12">
        <action box="0,-2,9,2"/>
       </tran_glyph>
      </tran>
      <tran trig="EXPLOSION">
       <action>Tunnel_addImageAt(me,
                  (uint8_t)(Q_PAR(me) &gt;&gt; 16),
                  (uint8_t)Q_PAR(me),
                  (int8_t) (Q_PAR(me) &gt;&gt; 8));</action>
       <tran_glyph conn="4,73,3,-1,12">
        <action box="0,-2,11,2"/>
       </tran_glyph>
      </tran>
      <tran trig="SCORE">
       <action>BSP_updateScore((uint16_t)Q_PAR(me));

/* increase difficulty of the game:
* the tunnel gets narrower as the score goes up
*/
me-&gt;minimal_gap = (uint8_t)(GAME_SCREEN_HEIGHT - 3U
                            - ((uint16_t)Q_PAR(me)/2000U));</action>
       <tran_glyph conn="4,76,3,-1,12">
        <action box="0,-2,6,2"/>
       </tran_glyph>
      </tran>
      <tran trig="GAME_OVER" target="../../5">
       <action>uint16_t score = (uint16_t)Q_PAR(me);
char str[5];

BSP_updateScore(score);

/* clear the screen */
memset(l_frame, (uint8_t)0,
       (GAME_SCREEN_WIDTH * GAME_SCREEN_HEIGHT/8));
BSP_drawBitmap(l_frame); /* render this frame on the display */

/* Output the final score to the screen */
BSP_drawNString((GAME_SCREEN_WIDTH - 6*10)/2, 1, &quot;Score:&quot;);
str[4] = '\0';                     /* zero-terminate the string */
str[3] = '0' + (score % 10); score /= 10;
str[2] = '0' + (score % 10); score /= 10;
str[1] = '0' + (score % 10); score /= 10;
str[0] = '0' + (score % 10);
BSP_drawNString((GAME_SCREEN_WIDTH - 6*10)/2 + 6*6, 1, str);</action>
       <tran_glyph conn="4,79,3,3,26,-8,2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,52,22,30">
       <entry box="1,2,6,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state name="screen_saver">
      <initial target="../2">
       <initial_glyph conn="35,34,5,1,21,7,-2">
        <action box="1,0,6,2"/>
       </initial_glyph>
      </initial>
      <tran trig="PLAYER_TRIGGER" target="../../2">
       <tran_glyph conn="34,37,3,1,28,-9,-30,6,-6">
        <action box="0,-2,13,2"/>
       </tran_glyph>
      </tran>
      <state name="screen_saver_hide">
       <entry>BSP_displayOff();  /* power down the display */
QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC*3U); /* 3 sec */</entry>
       <exit>QActive_disarmX((QActive *)me, 0U);
BSP_displayOn(); /* power up the display */</exit>
       <tran trig="Q_TIMEOUT" target="../../3">
        <tran_glyph conn="36,48,3,1,20,6,-2">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="36,39,18,11">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state name="screen_saver_show">
       <entry>uint32_t rnd = random();
/* clear the screen frame buffer */
memset(l_frame, (uint8_t)0,
       (GAME_SCREEN_WIDTH * GAME_SCREEN_HEIGHT/8));
Tunnel_addImageAt(me,
        PRESS_BUTTON_BMP,
        (uint8_t)(rnd % (GAME_SCREEN_WIDTH - 55)),
        (int8_t) (rnd % (GAME_SCREEN_HEIGHT - 8)));
BSP_drawBitmap(l_frame); /* render this frame on the display */
QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/3U);/* 1/3 sec */</entry>
       <exit>QActive_disarmX((QActive *)me, 0U);
/* clear the screen frame buffer */
memset(l_frame, (uint8_t)0,
       (GAME_SCREEN_WIDTH * GAME_SCREEN_HEIGHT/8));
BSP_drawBitmap(l_frame); /* render this frame on the display */</exit>
       <tran trig="Q_TIMEOUT" target="../../2">
        <tran_glyph conn="36,61,3,1,22,-15,-4">
         <action box="0,-2,13,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="36,52,18,11">
        <entry box="1,2,5,2"/>
        <exit box="1,4,5,2"/>
       </state_glyph>
      </state>
      <state_glyph node="34,30,26,35"/>
     </state>
     <state name="game_over">
      <entry>QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/2U); /* 1/2 sec */
me-&gt;blink_ctr = 5U*2U; /* 5s timeout */
BSP_drawNString((GAME_SCREEN_WIDTH - 6*9)/2, 0, &quot;Game Over&quot;);</entry>
      <exit>QActive_disarmX((QActive *)me, 0U);
BSP_updateScore(0); /* update the score on the display */</exit>
      <tran trig="Q_TIMEOUT">
       <action>--me-&gt;blink_ctr;
QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/2U); /* 1/2 sec */
BSP_drawNString((GAME_SCREEN_WIDTH - 6*9)/2, 0,
                (((me-&gt;blink_ctr &amp; 1) != 0)
                 ? &quot;Game Over&quot;
                 : &quot;         &quot;));</action>
       <choice target="../../../2">
        <guard>me-&gt;blink_ctr == 0</guard>
        <choice_glyph conn="45,78,5,1,15,-11,-30,-22,-4">
         <action box="1,0,17,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="32,78,3,-1,13">
        <action box="0,-2,12,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="32,69,26,12">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state name="show_logo">
      <entry>QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/2U); /* 1/2 sec */
me-&gt;blink_ctr = 10U;
BSP_drawNString(0U, 0U, &quot; Quantum  LeAps &quot;);
BSP_drawNString(0U, 1U, &quot;state-machine.co&quot;);</entry>
      <exit>QActive_disarmX((QActive *)me, 0U);</exit>
      <tran trig="Q_TIMEOUT">
       <action>--me-&gt;blink_ctr; /* toggle the blink couner */</action>
       <choice target="../../../2">
        <guard>me-&gt;blink_ctr == 0U</guard>
        <choice_glyph conn="18,25,5,1,10,7,-2">
         <action box="1,0,15,2"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard brief="else"/>
        <action>QActive_armX((QActive *)me, 0U, BSP_TICKS_PER_SEC/2U); /* 1/2 sec */</action>
        <choice>
         <guard>else</guard>
         <action>BSP_drawNString(6U*9U, 0U,         &quot;LeaPs &quot;);
BSP_drawNString(0U,    1U, &quot;tate-machine.com&quot;);</action>
         <choice_glyph conn="18,21,5,-1,6">
          <action box="2,0,6,2"/>
         </choice_glyph>
        </choice>
        <choice>
         <guard>(me-&gt;blink_ctr &amp; 1U) != 0U</guard>
         <action>BSP_drawNString(6U*9U, 0U,         &quot; LeAps&quot;);
BSP_drawNString(0U,    1U, &quot;state-machine.co&quot;);</action>
         <choice_glyph conn="18,21,4,-1,-4,6">
          <action box="2,-3,15,2"/>
         </choice_glyph>
        </choice>
        <choice_glyph conn="18,25,4,-1,-4">
         <action box="-4,-3,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,25,3,-1,14">
        <action box="0,-2,12,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,13,22,14">
       <entry box="1,2,5,2"/>
       <exit box="1,4,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="2,4,62,80"/>
    </state>
    <state name="final">
     <entry>/* clear the screen */
memset(l_frame, (uint8_t)0,
       (GAME_SCREEN_WIDTH * GAME_SCREEN_HEIGHT/8));
BSP_drawBitmap(l_frame); /* render this frame on the display */
QF_stop();  /* stop QF and cleanup */</entry>
     <state_glyph node="2,86,23,6">
      <entry box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="68,94"/>
   </statechart>
  </class>
  <class name="Ship" superclass="qpn::QMActive">
   <documentation>Ship Active Object</documentation>
   <attribute name="x" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="y" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="exp_ctr" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="score" type="uint16_t" visibility="0x02" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="3,3,5,1,38,5,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="active">
     <initial target="../2">
      <initial_glyph conn="4,9,5,1,31,11,-2">
       <action box="-8,-2,6,2"/>
      </initial_glyph>
     </initial>
     <tran trig="PLAYER_SHIP_MOVE">
      <action brief="\me-&gt;x = e-&gt;x; me-&gt;y = e-&gt;y;">me-&gt;x = (uint8_t)Q_PAR(me);
me-&gt;y = (uint8_t)(Q_PAR(me) &gt;&gt; 8);</action>
      <tran_glyph conn="3,13,3,-1,21">
       <action box="0,-2,19,4"/>
      </tran_glyph>
     </tran>
     <state name="parked">
      <tran trig="TAKE_OFF" target="../../3">
       <tran_glyph conn="5,24,3,1,30,6,-2">
        <action box="0,-2,8,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="5,18,28,8"/>
     </state>
     <state name="flying">
      <entry>me-&gt;score = 0; /* reset the score */
QACTIVE_POST((QActive *)&amp;AO_Tunnel, SCORE_SIG, me-&gt;score);</entry>
      <tran trig="TIME_TICK">
       <action>/* tell the Tunnel to draw the Ship and test for hits */
QACTIVE_POST((QActive *)&amp;AO_Tunnel, SHIP_IMG_SIG,
             ((QParam)SHIP_BMP &lt;&lt; 16)
             | (QParam)me-&gt;x
             | ((QParam)me-&gt;y &lt;&lt; 8));

++me-&gt;score;  /* increment the score for surviving another tick */

if ((me-&gt;score % 10) == 0) { /* is the score &quot;round&quot;? */
    QACTIVE_POST((QActive *)&amp;AO_Tunnel, SCORE_SIG, me-&gt;score);
}</action>
       <tran_glyph conn="5,35,3,-1,16">
        <action box="0,-2,9,2"/>
       </tran_glyph>
      </tran>
      <tran trig="PLAYER_TRIGGER">
       <action>QACTIVE_POST((QActive *)&amp;AO_Missile, MISSILE_FIRE_SIG,
             (QParam)me-&gt;x
             | (((QParam)(me-&gt;y - 1 + SHIP_HEIGHT) &amp; 0xFF) &lt;&lt; 8));</action>
       <tran_glyph conn="5,38,3,-1,16">
        <action box="0,-2,13,2"/>
       </tran_glyph>
      </tran>
      <tran trig="DESTROYED_MINE">
       <action>me-&gt;score += (uint16_t)Q_PAR(me);
/* the score will be sent to the Tunnel by the next TIME_TICK */</action>
       <tran_glyph conn="5,41,3,-1,16">
        <action box="0,-2,13,2"/>
       </tran_glyph>
      </tran>
      <tran trig="HIT_WALL" target="../../4">
       <tran_glyph conn="5,44,3,1,30,9,-2">
        <action box="0,-2,8,2"/>
       </tran_glyph>
      </tran>
      <tran trig="HIT_MINE" target="../../4">
       <tran_glyph conn="5,47,3,1,30,6,-2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="5,28,28,21">
       <entry box="1,2,5,2"/>
      </state_glyph>
     </state>
     <state name="exploding">
      <entry>me-&gt;exp_ctr = 0;</entry>
      <tran trig="TIME_TICK">
       <choice>
        <guard>me-&gt;exp_ctr &lt; 15</guard>
        <action>++me-&gt;exp_ctr;

  /* tell the Tunnel to draw the current stage of Explosion */
QACTIVE_POST((QActive *)&amp;AO_Tunnel, EXPLOSION_SIG,
         ((QParam)(EXPLOSION0_BMP + (me-&gt;exp_ctr &gt;&gt; 2)) &lt;&lt; 16)
         | (QParam)me-&gt;x
         | (((QParam)(me-&gt;y - 4 + SHIP_HEIGHT) &amp; 0xFF) &lt;&lt; 8));</action>
        <choice_glyph conn="16,60,5,-1,15">
         <action box="1,0,15,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../2">
        <guard>else</guard>
        <action>QACTIVE_POST((QActive *)&amp;AO_Tunnel, GAME_OVER_SIG, me-&gt;score);</action>
        <choice_glyph conn="16,60,4,1,4,21,-42,-4">
         <action box="1,4,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="5,60,3,-1,11">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="5,51,28,15">
       <entry box="1,2,13,4"/>
      </state_glyph>
     </state>
     <state_glyph node="3,5,36,63"/>
    </state>
    <state_diagram size="43,70"/>
   </statechart>
  </class>
  <class name="Missile" superclass="qpn::QMActive">
   <documentation>Missile Active Object</documentation>
   <attribute name="x" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="y" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="exp_ctr" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="speed" type="uint8_t" visibility="0x00" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="3,3,5,1,36,4,-3">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="armed">
     <tran trig="MISSILE_FIRE" target="../../2">
      <action>me-&gt;x = (uint8_t)Q_PAR(me); /* init position from the Ship */
me-&gt;y = (uint8_t)(Q_PAR(me) &gt;&gt; 8);</action>
      <tran_glyph conn="3,11,3,1,36,8,-2">
       <action box="0,-2,11,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,5,33,8"/>
    </state>
    <state name="flying">
     <tran trig="TIME_TICK">
      <choice>
       <guard>me-&gt;x + GAME_MISSILE_SPEED_X &lt; GAME_SCREEN_WIDTH</guard>
       <action>me-&gt;x += me-&gt;speed;
/*tell the Tunnel to draw the Missile and test for wall hits*/
QACTIVE_POST((QActive *)&amp;AO_Tunnel, MISSILE_IMG_SIG,
             ((QParam)MISSILE_BMP &lt;&lt; 16)
             | (QParam)me-&gt;x
             | ((QParam)me-&gt;y &lt;&lt; 8));</action>
       <choice_glyph conn="15,23,5,-1,18">
        <action box="1,0,22,4"/>
       </choice_glyph>
      </choice>
      <choice target="../../../1">
       <guard>else</guard>
       <choice_glyph conn="15,23,4,1,5,26,-19,-5">
        <action box="1,5,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="3,23,3,-1,12">
       <action box="0,-2,9,2"/>
      </tran_glyph>
     </tran>
     <tran trig="HIT_WALL" target="../../3">
      <tran_glyph conn="3,35,3,1,36,6,-2">
       <action box="0,-2,9,2"/>
      </tran_glyph>
     </tran>
     <tran trig="DESTROYED_MINE" target="../../1">
      <action>/* tell the Ship the score for destroing this Mine */
QACTIVE_POST((QActive *)&amp;AO_Ship, Q_SIG(me), Q_PAR(me));
/* re-arm immediately &amp; let the destroyed Mine do the exploding */</action>
      <tran_glyph conn="3,32,3,1,40,-23,-7">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,17,34,20"/>
    </state>
    <state name="exploding">
     <entry>me-&gt;exp_ctr = 0;</entry>
     <tran trig="TIME_TICK">
      <choice>
       <guard>(me-&gt;x &gt;= GAME_SPEED_X) &amp;&amp; (me-&gt;exp_ctr &lt; 15)</guard>
       <action>++me-&gt;exp_ctr;             /* advance the explosion counter */
me-&gt;x -= me-&gt;speed;       /* move the explosion by one step */

/* tell the Tunnel to render the current stage of Explosion */
QACTIVE_POST((QActive *)&amp;AO_Tunnel, EXPLOSION_SIG,
         ((QParam)(EXPLOSION0_BMP + (me-&gt;exp_ctr &gt;&gt; 2)) &lt;&lt; 16)
         | (QParam)(me-&gt;x + 3)
         | ((QParam)((int)me-&gt;y - 4) &lt;&lt; 8));</action>
       <choice_glyph conn="15,48,5,-1,20">
        <action box="1,0,19,4"/>
       </choice_glyph>
      </choice>
      <choice target="../../../1">
       <guard>else</guard>
       <action>/* explosion finished or moved outside the game */</action>
       <choice_glyph conn="15,48,4,1,4,30,-43,-9">
        <action box="1,4,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="3,48,3,-1,12">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,39,34,15">
      <entry box="1,2,13,4"/>
     </state_glyph>
    </state>
    <state_diagram size="47,56"/>
   </statechart>
  </class>
  <class name="Mine1" superclass="qpn::QMsm">
   <documentation>The Mine1 orthogonal component</documentation>
   <attribute name="x" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="y" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="exp_ctr" type="uint8_t" visibility="0x02" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="3,2,5,1,29,4,-4">
      <action box="0,-2,7,2"/>
     </initial_glyph>
    </initial>
    <state name="unused">
     <tran trig="MINE_PLANT" target="../../2/1">
      <action>me-&gt;x = (uint8_t)Q_PAR(me);
me-&gt;y = (uint8_t)(Q_PAR(me) &gt;&gt; 8);</action>
      <tran_glyph conn="3,10,3,1,41,15,-6">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,4,25,8"/>
    </state>
    <state name="used">
     <exit brief="...">/* tell the Tunnel that this mine is becoming disabled */
QACTIVE_POST((QActive *)&amp;AO_Tunnel,
             MINE_DISABLED_SIG, MINE_ID(me));</exit>
     <tran trig="MINE_RECYCLE" target="../../1">
      <tran_glyph conn="3,21,3,1,43,-13,-18">
       <action box="0,-2,12,2"/>
      </tran_glyph>
     </tran>
     <state name="planted">
      <tran trig="TIME_TICK">
       <choice>
        <guard>me-&gt;x &gt;= GAME_SPEED_X</guard>
        <action>me-&gt;x -= GAME_SPEED_X;  /* move the mine 1 step */

/* tell the Tunnel to draw the Mine */
QACTIVE_POST((QActive *)&amp;AO_Tunnel, MINE_IMG_SIG,
             ((QParam)MINE1_BMP &lt;&lt; 16)
             | (QParam)me-&gt;x
             | ((QParam)me-&gt;y &lt;&lt; 8));
</action>
        <choice_glyph conn="16,30,5,-1,20">
         <action box="1,0,20,2"/>
        </choice_glyph>
       </choice>
       <choice target="../../../../1">
        <guard>else</guard>
        <choice_glyph conn="16,30,4,1,4,32,-26,-20">
         <action box="1,4,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="5,30,3,-1,11">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="SHIP_IMG">
       <action>uint8_t x   = (uint8_t)Q_PAR(me);
uint8_t y   = (uint8_t)(Q_PAR(me) &gt;&gt; 8);
uint8_t bmp = (uint8_t)(Q_PAR(me) &gt;&gt; 16);</action>
       <choice target="../../../../1">
        <guard>do_bitmaps_overlap(MINE1_BMP, me-&gt;x, me-&gt;y, bmp, x, y)</guard>
        <action>QACTIVE_POST((QActive *)&amp;AO_Ship, HIT_MINE_SIG,  1);

/* go straight to 'disabled' and let the Ship do
* the exploding
*/</action>
        <choice_glyph conn="16,37,5,1,34,-29,-22">
         <action box="1,0,22,4"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="5,37,3,-1,11">
        <action box="0,-2,8,2"/>
       </tran_glyph>
      </tran>
      <tran trig="MISSILE_IMG">
       <action>uint8_t x   = (uint8_t)Q_PAR(me);
uint8_t y   = (uint8_t)(Q_PAR(me) &gt;&gt; 8);
uint8_t bmp = (uint8_t)(Q_PAR(me) &gt;&gt; 16);</action>
       <choice target="../../../2">
        <guard>do_bitmaps_overlap(MINE1_BMP, me-&gt;x, me-&gt;y, bmp, x, y)</guard>
        <action>/* post the score for destroying Mine type-1 */
QACTIVE_POST((QActive *)&amp;AO_Missile, DESTROYED_MINE_SIG, 25);</action>
        <choice_glyph conn="16,42,5,1,24,9,-2">
         <action box="1,0,21,4"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="5,42,3,-1,11">
        <action box="0,-2,11,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="5,23,33,24"/>
     </state>
     <state name="exploding">
      <entry>me-&gt;exp_ctr = 0;</entry>
      <tran trig="TIME_TICK">
       <choice>
        <guard>(me-&gt;x &gt;= GAME_SPEED_X) &amp;&amp; (me-&gt;exp_ctr &lt; 15)</guard>
        <action>++me-&gt;exp_ctr;  /* advance the explosion counter */
me-&gt;x -= GAME_SPEED_X; /* move explosion by 1 step */

/* tell the Game to render the current stage of Explosion */
QACTIVE_POST((QActive *)&amp;AO_Tunnel, EXPLOSION_SIG,
         ((QParam)(EXPLOSION0_BMP + (me-&gt;exp_ctr &gt;&gt; 2)) &lt;&lt; 16)
         | ((QParam)(me-&gt;x + 1))
         | (((QParam)((int)me-&gt;y - 4 + 2)) &lt;&lt; 8));</action>
        <choice_glyph conn="16,56,5,-1,20">
         <action box="1,0,20,4"/>
        </choice_glyph>
       </choice>
       <choice target="../../../../1">
        <guard>else</guard>
        <choice_glyph conn="16,56,4,1,5,36,-53,-24">
         <action box="1,5,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="5,56,3,-1,11">
        <action box="0,-2,9,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="5,49,33,14">
       <entry box="1,2,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="3,14,39,51">
      <exit box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="54,67"/>
   </statechart>
  </class>
  <class name="Mine2" superclass="qpn::QMsm">
   <documentation>The Mine2 orthogonal component</documentation>
   <attribute name="x" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="y" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="exp_ctr" type="uint8_t" visibility="0x02" properties="0x00"/>
   <statechart>
    <initial target="../1">
     <initial_glyph conn="3,2,5,1,31,4,-3">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="unused">
     <tran trig="MINE_PLANT" target="../../2/1">
      <action>me-&gt;x = (uint8_t)Q_PAR(me);
me-&gt;y = (uint8_t)(Q_PAR(me) &gt;&gt; 8);</action>
      <tran_glyph conn="3,10,3,1,40,15,-6">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="3,4,28,8"/>
    </state>
    <state name="used">
     <exit brief="...">/* tell the Tunnel that this mine is becoming disabled */
QACTIVE_POST((QActive *)&amp;AO_Tunnel,
             MINE_DISABLED_SIG, MINE_ID(me));</exit>
     <tran trig="MINE_RECYCLE" target="../../1">
      <tran_glyph conn="3,21,3,1,42,-13,-14">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <state name="planted">
      <tran trig="TIME_TICK">
       <choice>
        <guard>me-&gt;x &gt;= GAME_SPEED_X</guard>
        <action>me-&gt;x -= GAME_SPEED_X;              /* move the mine 1 step */

/* tell the Tunnel to draw the Mine */
QACTIVE_POST((QActive *)&amp;AO_Tunnel, MINE_IMG_SIG,
             ((QParam)MINE2_BMP &lt;&lt; 16)
             | (QParam)me-&gt;x
             | ((QParam)me-&gt;y &lt;&lt; 8));</action>
        <choice_glyph conn="17,30,5,-1,18">
         <action box="1,0,20,4"/>
        </choice_glyph>
       </choice>
       <choice target="../../../../1">
        <guard>else</guard>
        <choice_glyph conn="17,30,4,1,4,30,-26,-16">
         <action box="1,4,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="5,30,3,-1,12">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="SHIP_IMG">
       <action>uint8_t x   = (uint8_t)Q_PAR(me);
uint8_t y   = (uint8_t)(Q_PAR(me) &gt;&gt; 8);
uint8_t bmp = (uint8_t)(Q_PAR(me) &gt;&gt; 16);</action>
       <choice target="../../../../1">
        <guard>do_bitmaps_overlap(MINE2_BMP, me-&gt;x, me-&gt;y, bmp, x, y)</guard>
        <action>QACTIVE_POST((QActive *)&amp;AO_Ship, HIT_MINE_SIG,  2);
/* go straight to 'disabled' and let the Ship do the exploding */</action>
        <choice_glyph conn="17,37,5,1,32,-29,-18">
         <action box="1,0,21,4"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="5,37,3,-1,12">
        <action box="0,-2,8,2"/>
       </tran_glyph>
      </tran>
      <tran trig="MISSILE_IMG">
       <action>uint8_t x   = (uint8_t)Q_PAR(me);
uint8_t y   = (uint8_t)(Q_PAR(me) &gt;&gt; 8);
uint8_t bmp = (uint8_t)(Q_PAR(me) &gt;&gt; 16);</action>
       <choice target="../../../2">
        <guard>do_bitmaps_overlap(MINE2_MISSILE_BMP, me-&gt;x, me-&gt;y, bmp, x, y)</guard>
        <action>/* NOTE: Mine type-2 is nastier than Mine type-1.
* The type-2 mine can hit the Ship with any of its
* &quot;tentacles&quot;. However, it can be destroyed by the
* Missile only by hitting its center, defined as
* a smaller bitmap MINE2_MISSILE_BMP.
*/
/* post the score for destroying Mine type-2 */
QACTIVE_POST((QActive *)&amp;AO_Missile, DESTROYED_MINE_SIG, 45);</action>
        <choice_glyph conn="17,43,5,1,22,9,-2">
         <action box="1,0,26,4"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="5,43,3,-1,12">
        <action box="0,-2,11,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="5,24,32,24"/>
     </state>
     <state name="exploding">
      <entry>me-&gt;exp_ctr = 0;</entry>
      <tran trig="TIME_TICK">
       <choice>
        <guard>(me-&gt;x &gt;= GAME_SPEED_X) &amp;&amp; (me-&gt;exp_ctr &lt; 15)</guard>
        <action>++me-&gt;exp_ctr; /* advance the explosion counter */
me-&gt;x -= GAME_SPEED_X; /* move explosion by 1 step */

/* tell the Game to render the current stage of Explosion */
QACTIVE_POST((QActive *)&amp;AO_Tunnel, EXPLOSION_SIG,
         ((QParam)(EXPLOSION0_BMP + (me-&gt;exp_ctr &gt;&gt; 2)) &lt;&lt; 16)
         | ((QParam)(me-&gt;x + 1))
         | (((QParam)((int)me-&gt;y - 4 + 2)) &lt;&lt; 8));</action>
        <choice_glyph conn="17,57,5,-1,18">
         <action box="1,0,20,4"/>
        </choice_glyph>
       </choice>
       <choice target="../../../../1">
        <guard>else</guard>
        <choice_glyph conn="17,57,4,1,5,34,-54,-20">
         <action box="1,5,6,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="5,57,3,-1,12">
        <action box="0,-2,9,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="5,50,32,14">
       <entry box="1,2,5,2"/>
      </state_glyph>
     </state>
     <state_glyph node="3,14,38,52">
      <exit box="1,2,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="53,68"/>
   </statechart>
  </class>
  <attribute name="AO_Tunnel" type="struct Tunnel" visibility="0x00" properties="0x00"/>
  <attribute name="AO_Ship" type="struct Ship" visibility="0x00" properties="0x00"/>
  <attribute name="AO_Missile" type="struct Missile" visibility="0x00" properties="0x00"/>
  <operation name="do_bitmaps_overlap" type="uint8_t" visibility="0x00" properties="0x00">
   <parameter name="bmp_id1" type="uint8_t"/>
   <parameter name="x1" type="uint8_t"/>
   <parameter name="y1" type="uint8_t"/>
   <parameter name="bmp_id2" type="uint8_t"/>
   <parameter name="x2" type="uint8_t"/>
   <parameter name="y2" type="uint8_t"/>
  </operation>
  <operation name="Tunnel_ctor" type="void" visibility="0x00" properties="0x01">
   <code>uint8_t n;
Tunnel *me = &amp;AO_Tunnel;
QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Tunnel_initial));
for (n = 0; n &lt; GAME_MINES_MAX; ++n) {
    me-&gt;mine1_pool[n] = Mine1_ctor(n); /* instantiate Mine1 in the pool */
    me-&gt;mine2_pool[n] = Mine2_ctor(n); /* instantiate Mine2 in the pool */
    me-&gt;mines[n] = (QMsm *)0;                     /* mine 'n' is unused */
}
me-&gt;last_mine_x = 0;   /* the last mine at the right edge of the tunnel */
me-&gt;last_mine_y = 0;</code>
  </operation>
  <operation name="Ship_ctor" type="void" visibility="0x00" properties="0x01">
   <code>Ship *me = &amp;AO_Ship;
QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Ship_initial));
me-&gt;x = GAME_SHIP_X;
me-&gt;y = GAME_SHIP_Y;</code>
  </operation>
  <operation name="Missile_ctor" type="void" visibility="0x00" properties="0x01">
   <parameter name="speed" type="uint8_t"/>
   <code>Missile *me = &amp;AO_Missile;
QMActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Missile_initial));
me-&gt;speed = speed;</code>
  </operation>
  <operation name="Mine1_ctor" type="QMsm *" visibility="0x00" properties="0x01">
   <parameter name="id" type="uint8_t"/>
   <code>Mine1 *me;
Q_REQUIRE(id &lt; GAME_MINES_MAX);

me = &amp;l_mine1[id];
QMsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Mine1_initial));
return (QMsm *)me;</code>
  </operation>
  <operation name="Mine2_ctor" type="QMsm *" visibility="0x00" properties="0x01">
   <parameter name="id" type="uint8_t"/>
   <code>Mine2 *me;
Q_REQUIRE(id &lt; GAME_MINES_MAX);

me = &amp;l_mine2[id];
QMsm_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Mine2_initial));
return (QMsm *)me;</code>
  </operation>
 </package>
 <directory name=".">
  <file name="game.h">
   <text>#ifndef game_h
#define game_h

enum GameSignals {                              /* signals used in the game */
    TIME_TICK_SIG = Q_USER_SIG,                  /* published from tick ISR */
    PLAYER_TRIGGER_SIG, /* published by Player (ISR) to trigger the Missile */
    PLAYER_QUIT_SIG,          /* published by Player (ISR) to quit the game */
    GAME_OVER_SIG,          /* published by Ship when it finishes exploding */
    PLAYER_SHIP_MOVE_SIG,  /* posted by Player (ISR) to the Ship to move it */
    TAKE_OFF_SIG,    /* from Tunnel to Ship to grant permission to take off */
    HIT_WALL_SIG,            /* from Tunnel to Ship when Ship hits the wall */
    HIT_MINE_SIG,     /* from Mine to Ship or Missile when it hits the mine */
    SHIP_IMG_SIG,     /* from Ship to the Tunnel to draw and check for hits */
    MISSILE_IMG_SIG,  /* from Missile the Tunnel to draw and check for hits */
    MINE_IMG_SIG,            /* sent by Mine to the Tunnel to draw the mine */
    MISSILE_FIRE_SIG,                /* sent by Ship to the Missile to fire */
    DESTROYED_MINE_SIG, /* from Missile to Ship when Missile destroyed Mine */
    EXPLOSION_SIG,     /* from any exploding object to render the explosion */
    MINE_PLANT_SIG,                  /* from Tunnel to the Mine to plant it */
    MINE_DISABLED_SIG,      /* from Mine to Tunnel when it becomes disabled */
    MINE_RECYCLE_SIG,         /* sent by Tunnel to Mine to recycle the mine */
    SCORE_SIG    /* from Ship to Tunnel to adjust game level based on score */
};

/* active objects ..........................................................*/
extern struct Tunnel  AO_Tunnel;
extern struct Ship    AO_Ship;
extern struct Missile AO_Missile;

$declare(AOs::Tunnel_ctor)
$declare(AOs::Ship_ctor)
$declare(AOs::Missile_ctor)

/* common constants and shared helper functions ............................*/
#define GAME_SCREEN_WIDTH          BSP_SCREEN_WIDTH
#define GAME_SCREEN_HEIGHT         BSP_SCREEN_HEIGHT
#define GAME_MINES_MAX             5
#define GAME_MINES_DIST_MIN        10
#define GAME_SPEED_X               1
#define GAME_MISSILE_SPEED_X       2
#define GAME_SHIP_X                10
#define GAME_SHIP_Y                (GAME_SCREEN_HEIGHT / 2)

enum GameBitmapIds {
    PRESS_BUTTON_BMP,
    SHIP_BMP,
    MISSILE_BMP,
    MINE1_BMP,
    MINE2_BMP,
    MINE2_MISSILE_BMP,
    EXPLOSION0_BMP,
    EXPLOSION1_BMP,
    EXPLOSION2_BMP,
    EXPLOSION3_BMP,
    MAX_BMP
};

$declare(AOs::do_bitmaps_overlap)

/* instantiation of the Mines orthogonal components */
$declare(AOs::Mine1_ctor)
$declare(AOs::Mine2_ctor)

#endif  /* game_h */</text>
  </file>
  <file name="tunnel.c">
   <text>#include &quot;qpn_port.h&quot;
#include &quot;game.h&quot;
#include &quot;bsp.h&quot;

#include &lt;string.h&gt;                           /* for memmove() and memcpy() */

Q_DEFINE_THIS_MODULE(&quot;tunnel&quot;)

/* local objects -----------------------------------------------------------*/
$declare(AOs::Tunnel)

static uint32_t l_rnd;     /* random seed */
static uint8_t l_walls[GAME_SCREEN_WIDTH * GAME_SCREEN_HEIGHT/8];
static uint8_t l_frame[GAME_SCREEN_WIDTH * GAME_SCREEN_HEIGHT/8];

/* local helper functions --------------------------------------------------*/
static void randomSeed(uint32_t seed);
static uint32_t random(void);

/* global objects ----------------------------------------------------------*/
Tunnel AO_Tunnel;

/* helper functions --------------------------------------------------------*/
/*
* The bitmap for the &quot;Press Button&quot; text:
*
*     xxx.........................xxx........x...x...........
*     x..x........................x..x.......x...x...........
*     x..x.x.xx..xx...xxx..xxx....x..x.x..x.xxx.xxx..xx..xxx.
*     xxx..xx...x..x.x....x.......xxx..x..x..x...x..x..x.x..x
*     x....x....xxxx..xx...xx.....x..x.x..x..x...x..x..x.x..x
*     x....x....x.......x....x....x..x.x..x..x...x..x..x.x..x
*     x....x.....xxx.xxx..xxx.....xxx...xxx...x...x..xx..x..x
*     .......................................................
*/
static uint8_t const press_button_bits[] = {
    0x7F, 0x09, 0x09, 0x06, 0x00, 0x7C, 0x08, 0x04, 0x04, 0x00,
    0x38, 0x54, 0x54, 0x58, 0x00, 0x48, 0x54, 0x54, 0x24, 0x00,
    0x48, 0x54, 0x54, 0x24, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x49,
    0x49, 0x36, 0x00, 0x3C, 0x40, 0x40, 0x7C, 0x00, 0x04, 0x3F,
    0x44, 0x00, 0x04, 0x3F, 0x44, 0x00, 0x38, 0x44, 0x44, 0x38,
    0x00, 0x7C, 0x04, 0x04, 0x78
};

/* bitmap of the Ship:
*
*     x....
*     xxx..
*     xxxxx
*/
static uint8_t const ship_bits[] = {
    0x07, 0x06, 0x06, 0x04, 0x04
};

/* bitmap of the Missile:
*
*     xxx
*/
static uint8_t const missile_bits[] = {
    0x01, 0x01, 0x01
};

/* bitmap of the Mine type-1:
*
*     .x.
*     xxx
*     .x.
*/
static uint8_t const mine1_bits[] = {
    0x02, 0x07, 0x02
};

/* bitmap of the Mine type-2:
*
*     x..x
*     .xx.
*     .xx.
*     x..x
*/
static uint8_t const mine2_bits[] = {
    0x09, 0x06, 0x06, 0x09
};

/* Mine type-2 is nastier than Mine type-1. The type-2 mine can
* hit the Ship with any of its &quot;tentacles&quot;. However, it can be
* destroyed by the Missile only by hitting its center, defined as
* the following bitmap:
*
*     ....
*     .xx.
*     .xx.
*     ....
*/
static uint8_t const mine2_missile_bits[] = {
    0x00, 0x06, 0x06, 0x00
};

/*
* The bitmap of the explosion stage 0:
*
*     .......
*     .......
*     ...x...
*     ..x.x..
*     ...x...
*     .......
*     .......
*/
static uint8_t const explosion0_bits[] = {
    0x00, 0x00, 0x08, 0x14, 0x08, 0x00, 0x00
};

/*
* The bitmap of the explosion stage 1:
*
*     .......
*     .......
*     ..x.x..
*     ...x...
*     ..x.x..
*     .......
*     .......
*/
static uint8_t const explosion1_bits[] = {
    0x00, 0x00, 0x14, 0x08, 0x14, 0x00, 0x00
};

/*
* The bitmap of the explosion stage 2:
*
*     .......
*     .x...x.
*     ..x.x..
*     ...x...
*     ..x.x..
*     .x...x.
*     .......
*/
static uint8_t const explosion2_bits[] = {
    0x00, 0x22, 0x14, 0x08, 0x14, 0x22, 0x00
};

/*
* The bitmap of the explosion stage 3:
*
*     x..x..x
*     .x.x.x.
*     ..x.x..
*     xx.x.xx
*     ..x.x..
*     .x.x.x.
*     x..x..x
*/
static uint8_t const explosion3_bits[] = {
    0x49, 0x2A, 0x14, 0x6B, 0x14, 0x2A, 0x49
};

typedef struct BitmapTag { /* the auxiliary structure to hold const bitmaps */
    uint8_t const *bits;                          /* the bits in the bitmap */
    uint8_t width;                               /* the width of the bitmap */
} Bitmap;

static Bitmap const l_bitmap[MAX_BMP] = {
    { press_button_bits,  Q_DIM(press_button_bits)  },
    { ship_bits,          Q_DIM(ship_bits)          },
    { missile_bits,       Q_DIM(missile_bits)       },
    { mine1_bits,         Q_DIM(mine1_bits)         },
    { mine2_bits,         Q_DIM(mine2_bits)         },
    { mine2_missile_bits, Q_DIM(mine2_missile_bits) },
    { explosion0_bits,    Q_DIM(explosion0_bits)    },
    { explosion1_bits,    Q_DIM(explosion1_bits)    },
    { explosion2_bits,    Q_DIM(explosion2_bits)    },
    { explosion3_bits,    Q_DIM(explosion3_bits)    }
};

/* Active object definition ================================================*/
$define(AOs::Tunnel_ctor)
$define(AOs::Tunnel)

/*..........................................................................*/
uint32_t random(void) {      /* a very cheap pseudo-random-number generator */
    /* &quot;Super-Duper&quot; Linear Congruential Generator (LCG)
    * LCG(2^32, 3*7*11*13*23, 0, seed)
    */
    l_rnd = l_rnd * (3*7*11*13*23);
    return l_rnd &gt;&gt; 8;
}
/*..........................................................................*/
void randomSeed(uint32_t seed) {
    l_rnd = seed;
}
/*..........................................................................*/
uint8_t do_bitmaps_overlap(uint8_t bmp_id1, uint8_t x1, uint8_t y1,
                           uint8_t bmp_id2, uint8_t x2, uint8_t y2)
{
    uint8_t x;
    uint8_t x0;
    uint8_t w;
    uint32_t bits1;
    uint32_t bits2;
    Bitmap const *bmp1;
    Bitmap const *bmp2;

    Q_REQUIRE((bmp_id1 &lt; Q_DIM(l_bitmap)) &amp;&amp; (bmp_id2 &lt; Q_DIM(l_bitmap)));

    bmp1 = &amp;l_bitmap[bmp_id1];
    bmp2 = &amp;l_bitmap[bmp_id2];

             /* is the incoming object starting to overlap the Mine bitmap? */
    if ((x1 &lt;= x2) &amp;&amp; (x1 + bmp2-&gt;width &gt; x2)) {
        x0 = x2 - x1;
        w  = x1 + bmp2-&gt;width - x2;
        if (w &gt; bmp1-&gt;width) {
            w = bmp1-&gt;width;
        }
        for (x = 0; x &lt; w; ++x) {      /* scan over the overlapping columns */
            bits1 = ((uint32_t)bmp2-&gt;bits[x + x0] &lt;&lt; y2);
            bits2 = ((uint32_t)bmp1-&gt;bits[x] &lt;&lt; y1);
            if ((bits1 &amp; bits2) != 0) {             /* do the bits overlap? */
                return (uint8_t)1;                                  /* yes! */
            }
        }
    }
    else {
        if ((x1 &gt; x2) &amp;&amp; (x2 + bmp1-&gt;width &gt; x1)) {
            x0 = x1 - x2;
            w  = x2 + bmp1-&gt;width - x1;
            if (w &gt; bmp2-&gt;width) {
                w = bmp2-&gt;width;
            }
            for (x = 0; x &lt; w; ++x) {  /* scan over the overlapping columns */
                bits1 = ((uint32_t)bmp1-&gt;bits[x + x0] &lt;&lt; y1);
                bits2 = ((uint32_t)bmp2-&gt;bits[x] &lt;&lt; y2);
                if ((bits1 &amp; bits2) != 0) {         /* do the bits overlap? */
                    return (uint8_t)1;                              /* yes! */
                }
            }
        }
    }
    return (uint8_t)0;                        /* the bitmaps do not overlap */
}</text>
  </file>
  <file name="ship.c">
   <text>#include &quot;qpn_port.h&quot;
#include &quot;bsp.h&quot;
#include &quot;game.h&quot;

/* Q_DEFINE_THIS_MODULE(ship) */

#define SHIP_WIDTH  5U
#define SHIP_HEIGHT 3U

/* encapsulated delcaration of the Ship active object ----------------------*/
$declare(AOs::Ship)

/* global objects ----------------------------------------------------------*/
Ship AO_Ship;

/* Active object definition ------------------------------------------------*/
$define(AOs::Ship_ctor)
$define(AOs::Ship)</text>
  </file>
  <file name="missile.c">
   <text>#include &quot;qpn_port.h&quot;
#include &quot;bsp.h&quot;
#include &quot;game.h&quot;

/* Q_DEFINE_THIS_MODULE(missile) */

/* encapsulated delcaration of the Missile active object -------------------*/
$declare(AOs::Missile)

/* global objects ----------------------------------------------------------*/
Missile AO_Missile;

/* Active object definition ------------------------------------------------*/
$define(AOs::Missile_ctor)
$define(AOs::Missile)</text>
  </file>
  <file name="mine1.c">
   <text>#include &quot;qpn_port.h&quot;
#include &quot;bsp.h&quot;
#include &quot;game.h&quot;

Q_DEFINE_THIS_MODULE(&quot;mine1&quot;)

/* encapsulated delcaration of the Mine1 HSM -------------------------------*/
$declare(AOs::Mine1)

/* local objects -----------------------------------------------------------*/
static Mine1 l_mine1[GAME_MINES_MAX];             /* a pool of type-1 mines */

                             /* helper macro to provide the ID of this mine */
#define MINE_ID(me_)    ((me_) - l_mine1)

/* Mine1 class definition --------------------------------------------------*/
$define(AOs::Mine1_ctor)
$define(AOs::Mine1)</text>
  </file>
  <file name="mine2.c">
   <text>#include &quot;qpn_port.h&quot;
#include &quot;bsp.h&quot;
#include &quot;game.h&quot;

Q_DEFINE_THIS_MODULE(&quot;mine2&quot;)

/* encapsulated delcaration of the Mine2 HSM -------------------------------*/
$declare(AOs::Mine2)

/* local objects -----------------------------------------------------------*/
static Mine2 l_mine2[GAME_MINES_MAX];             /* a pool of type-2 mines */

                             /* helper macro to provide the ID of this mine */
#define MINE_ID(me_)    ((me_) - l_mine2)

/* Mine2 class definition --------------------------------------------------*/
$define(AOs::Mine2_ctor)
$define(AOs::Mine2)</text>
  </file>
 </directory>
</model>
